<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JS 输出]]></title>
      <url>https://coder-zjq.github.io/2016/10/29/JS-%E8%BE%93%E5%87%BA/</url>
      <content type="html"><![CDATA[<h3 id="通过指定的-id-来访问-HTML-元素，并改变其内容："><a href="#通过指定的-id-来访问-HTML-元素，并改变其内容：" class="headerlink" title="通过指定的 id 来访问 HTML 元素，并改变其内容："></a>通过指定的 id 来访问 HTML 元素，并改变其内容：</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My First Web Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>My First Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">document.getElementById("demo").innerHTML="My First JavaScript";</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Using a ListView]]></title>
      <url>https://coder-zjq.github.io/2016/10/25/RN(8)_Using-a-ListView/</url>
      <content type="html"><![CDATA[<figure class="highlight jsx"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  View,</div><div class="line">  Text,</div><div class="line">  Image,</div><div class="line">  ScrollView</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AwesomeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;ScrollView style=&#123;&#123;marginTop:20&#125;&#125;&gt;</div><div class="line">      &lt;Text style=&#123;&#123;fontSize:20&#125;&#125;&gt;</div><div class="line">      哈哈，我在上面。。。</div><div class="line">      &lt;/Text&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Text style=&#123;&#123;fontSize:20&#125;&#125;&gt;</div><div class="line">      哈哈，我在中间。。。</div><div class="line">      &lt;/Text&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Image source=&#123;require("./icon.png")&#125;/&gt;</div><div class="line">      &lt;Text style=&#123;&#123;fontSize:20&#125;&#125;&gt;</div><div class="line">      哈哈，我在下面。。。</div><div class="line">      &lt;/Text&gt;</div><div class="line">      &lt;/ScrollView&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent('AwesomeProject', () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f94h878nkij20af0j5t9c.jpg" alt="14:01:53.jpg"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[install-react-native-tools]]></title>
      <url>https://coder-zjq.github.io/2016/10/23/install-react-native-tools/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[vscode 更改显示语言]]></title>
      <url>https://coder-zjq.github.io/2016/10/23/how-to-change-vscode-language/</url>
      <content type="html"><![CDATA[<h2 id="Configure-Language-指令"><a href="#Configure-Language-指令" class="headerlink" title="Configure Language 指令"></a>Configure Language 指令</h2><ol>
<li><code>shift</code> + <code>command</code> 唤出 <strong>Command Palette</strong></li>
<li>输入 <code>Configure Language</code> 确定</li>
<li>编辑 <code>locale.json</code> 文件<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    // 定义 VSCode 的显示语言。</div><div class="line">    // 请参阅 https://go.microsoft.com/fwlink/?LinkId=761051，了解支持的语言列表。</div><div class="line">    // 要更改值需要重启 VSCode。</div><div class="line">    "locale":"en"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="可选的语言环境"><a href="#可选的语言环境" class="headerlink" title="可选的语言环境"></a>可选的语言环境</h2><table>
<thead>
<tr>
<th>Display Language</th>
<th>Locale</th>
</tr>
</thead>
<tbody>
<tr>
<td>English (US)</td>
<td><code>en</code></td>
</tr>
<tr>
<td>Simplified Chinese</td>
<td><code>zh-CN</code></td>
</tr>
<tr>
<td>Traditional Chinese</td>
<td><code>zh-TW</code></td>
</tr>
<tr>
<td>French</td>
<td><code>fr</code></td>
</tr>
<tr>
<td>German</td>
<td><code>de</code></td>
</tr>
<tr>
<td>Italian</td>
<td><code>it</code></td>
</tr>
<tr>
<td>Japanese</td>
<td><code>ja</code></td>
</tr>
<tr>
<td>Korean</td>
<td><code>ko</code></td>
</tr>
<tr>
<td>Russian</td>
<td><code>ru</code></td>
</tr>
<tr>
<td>Spanish</td>
<td><code>es</code></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Yarn Usage]]></title>
      <url>https://coder-zjq.github.io/2016/10/13/yarn-usage/</url>
      <content type="html"><![CDATA[<h3 id="初始化一个新项目"><a href="#初始化一个新项目" class="headerlink" title="初始化一个新项目"></a>初始化一个新项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ yarn init</div></pre></td></tr></table></figure>
<h3 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ yarn add [package]</div><div class="line">$ yarn add [package]@[version]</div><div class="line">$ yarn add [package]@[tag]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="更新依赖包"><a href="#更新依赖包" class="headerlink" title="更新依赖包"></a>更新依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ yarn upgrade [package]</div><div class="line">$ yarn upgrade [package]@[version]</div><div class="line">$ yarn upgrade [package]@[tag]</div></pre></td></tr></table></figure>
<h3 id="移除依赖包"><a href="#移除依赖包" class="headerlink" title="移除依赖包"></a>移除依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ yarn remove [package]</div></pre></td></tr></table></figure>
<h3 id="安装项目的所有依赖包"><a href="#安装项目的所有依赖包" class="headerlink" title="安装项目的所有依赖包"></a>安装项目的所有依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ yarn</div></pre></td></tr></table></figure>
<p><strong><em>or</em></strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ yarn install</div></pre></td></tr></table></figure></p>
<hr>
<p><a href="https://yarnpkg.com/en/docs/usage" target="_blank" rel="external">Yarn Usage</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Yarn Installation on macOS]]></title>
      <url>https://coder-zjq.github.io/2016/10/13/yarn-installation/</url>
      <content type="html"><![CDATA[<h2 id="首先得安装-Node-js"><a href="#首先得安装-Node-js" class="headerlink" title="首先得安装 Node.js"></a>首先得安装 <a href="https://nodejs.org/" target="_blank" rel="external">Node.js</a></h2><h3 id="最简单的通过脚本安装"><a href="#最简单的通过脚本安装" class="headerlink" title="最简单的通过脚本安装"></a>最简单的通过脚本安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ curl -o- -L https://yarnpkg.com/install.sh | bash</div></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/65e4f1e6gw1f8ql5fz45bj20fu04rq56.jpg" alt="QQ20161013-0.png"><br><a id="more"></a></p>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install --global yarn</div></pre></td></tr></table></figure>
<h3 id="Manual"><a href="#Manual" class="headerlink" title="Manual"></a>Manual</h3><p>You can install Yarn by <a href="https://yarnpkg.com/latest.tar.gz" target="_blank" rel="external">downloading a tarball</a> and extracting it anywhere.<br><strong><em>OR</em></strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># install wget first</span></div><div class="line">$ <span class="built_in">cd</span> /opt</div><div class="line">$ wget https://yarnpkg.com/latest.tar.gz</div><div class="line">$ tar zvxf yarn-*.tar.gz</div><div class="line"><span class="comment"># Yarn is now in /opt/yarn-[version]/</span></div></pre></td></tr></table></figure></p>
<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ yarn --version</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f8ql84cm8fj208x00q0ss.jpg" alt="13:42:18.jpg"></p>
<h3 id="Uninstall"><a href="#Uninstall" class="headerlink" title="Uninstall"></a>Uninstall</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ rm -rf ~/.yarn</div></pre></td></tr></table></figure>
<hr>
<p><a href="https://yarnpkg.com/en/docs/install" target="_blank" rel="external">Yarn Installation</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[The let keyword in ES6]]></title>
      <url>https://coder-zjq.github.io/2016/10/08/The_let_keyword_in%20ES6/</url>
      <content type="html"><![CDATA[<h3 id="The-let-keyword-in-ES6"><a href="#The-let-keyword-in-ES6" class="headerlink" title="The let keyword in ES6"></a>The let keyword in ES6</h3><ul>
<li><p><code>let</code> 命令声明的变量只在其所在的代码块内有效：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line">a;	<span class="comment">// a is not defined</span></div><div class="line">b;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// use var</span></div><div class="line"><span class="keyword">var</span> fs = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  fs.push(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i));</div><div class="line">&#125;</div><div class="line">fs.forEach(<span class="function"><span class="params">f</span> =&gt;</span> f());</div><div class="line"><span class="comment">// the log is:</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"></div><div class="line"><span class="comment">// use let</span></div><div class="line"><span class="keyword">var</span> fs = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  fs.push(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i));</div><div class="line">&#125;</div><div class="line">fs.forEach(<span class="function"><span class="params">f</span> =&gt;</span> f());</div><div class="line"><span class="comment">// the log is:</span></div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// 6</span></div><div class="line"><span class="comment">// 7</span></div><div class="line"><span class="comment">// 8</span></div><div class="line"><span class="comment">// 9</span></div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>不允许重复声明：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1.</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>; <span class="comment">// 报错</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2.</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// 报错</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> arg; <span class="comment">// 报错</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 4.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">let</span> arg; <span class="comment">// 不报错</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1. </span></div><div class="line"><span class="keyword">var</span> message = <span class="string">"hi"</span>;</div><div class="line">&#123;</div><div class="line">  <span class="keyword">var</span> message = <span class="string">"bye"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// "bye"</span></div><div class="line"><span class="built_in">console</span>.log(message);</div><div class="line"></div><div class="line"><span class="comment">// 2.</span></div><div class="line"><span class="keyword">var</span> message = <span class="string">"hi"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> message = <span class="string">"bye"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// "hi"</span></div><div class="line"><span class="built_in">console</span>.log(message);</div><div class="line"></div><div class="line"><span class="comment">// 3. </span></div><div class="line"><span class="keyword">let</span> message = <span class="string">"hi"</span>;</div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> message = <span class="string">"bye"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// "hi"</span></div><div class="line"><span class="built_in">console</span>.log(message);</div></pre></td></tr></table></figure>
<!-- more -->
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  fs.push(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i));</div><div class="line">&#125;</div><div class="line">fs.forEach(<span class="function"><span class="params">f</span> =&gt;</span> f());</div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 10</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> fs = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  fs.push(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i));</div><div class="line">&#125;</div><div class="line">fs.forEach(<span class="function"><span class="params">f</span> =&gt;</span> f());</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// 6</span></div><div class="line"><span class="comment">// 7</span></div><div class="line"><span class="comment">// 8</span></div><div class="line"><span class="comment">// 9</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">varFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> previous = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> current = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> i;</div><div class="line">  <span class="keyword">var</span> temp;</div><div class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">1</span>) &#123;</div><div class="line">    temp = previous;</div><div class="line">    previous = current;</div><div class="line">    current = temp + current;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// safe way</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">letFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> previous = <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> current = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">1</span>)&#123;</div><div class="line">    <span class="keyword">let</span> temp = previous;</div><div class="line">    previous = current;</div><div class="line">    current = temp + current;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考：<a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="external">let和const命令</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RN(7) Layout With Flexbox]]></title>
      <url>https://coder-zjq.github.io/2016/10/07/RN(7)_Layout_with_Flexbox/</url>
      <content type="html"><![CDATA[<h2 id="Layout-with-Flexbox"><a href="#Layout-with-Flexbox" class="headerlink" title="Layout with Flexbox"></a>Layout with Flexbox</h2><h3 id="1-Flex-Direction"><a href="#1-Flex-Direction" class="headerlink" title="1. Flex Direction"></a>1. Flex Direction</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstReactNativeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// Try setting `flexDirection` to `column`.</span></div><div class="line">      &lt;View style=&#123;&#123;<span class="attr">flex</span> : <span class="number">1</span>, <span class="attr">flexDirection</span> : <span class="string">'row'</span>&#125;&#125;&gt;</div><div class="line">      &lt;View style=&#123;styles.smallBlue&#125; /&gt;</div><div class="line">      &lt;View style=&#123;styles.middleBlue&#125; /&gt;</div><div class="line">      &lt;View style=&#123;styles.bigBlue&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    smallBlue : &#123;</div><div class="line">        backgroundColor : 'powderblue',</div><div class="line">        width : 50,</div><div class="line">        height : 50</div><div class="line">    &#125;,</div><div class="line">    middleBlue : &#123;</div><div class="line">        backgroundColor : 'skyblue',</div><div class="line">        width : 50,</div><div class="line">        height : 50</div><div class="line">    &#125;,</div><div class="line">    bigBlue : &#123;</div><div class="line">        backgroundColor : 'steelblue',</div><div class="line">        width : 50,</div><div class="line">        height : 50</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f8gj2ieztoj20ad034dfw.jpg" alt="20:52:04.jpg"></p>
<h3 id="2-Justify-Content"><a href="#2-Justify-Content" class="headerlink" title="2. Justify Content"></a>2. Justify Content</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstReactNativeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// Try setting `justifyContent` to `center`.</span></div><div class="line">      <span class="comment">// Try setting `flexDirection` to `row`.</span></div><div class="line">      &lt;View style=&#123;&#123;<span class="attr">flex</span> : <span class="number">1</span>, <span class="attr">flexDirection</span> : <span class="string">'row'</span>, <span class="attr">justifyContent</span> : <span class="string">'space-between'</span>&#125;&#125;&gt;</div><div class="line">      &lt;View style=&#123;styles.smallBlue&#125; /&gt;</div><div class="line">      &lt;View style=&#123;styles.middleBlue&#125; /&gt;</div><div class="line">      &lt;View style=&#123;styles.bigBlue&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line"></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    smallBlue : &#123;</div><div class="line">        backgroundColor : 'powderblue',</div><div class="line">        width : 50,</div><div class="line">        height : 50</div><div class="line">    &#125;,</div><div class="line">    middleBlue : &#123;</div><div class="line">        backgroundColor : 'skyblue',</div><div class="line">        width : 50,</div><div class="line">        height : 50</div><div class="line">    &#125;,</div><div class="line">    bigBlue : &#123;</div><div class="line">        backgroundColor : 'steelblue',</div><div class="line">        width : 50,</div><div class="line">        height : 50</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/801b780agw1f8gj4j08nej20ad03ot8s.jpg" alt="20:54:00.jpg"></p>
<h3 id="3-Align-Items"><a href="#3-Align-Items" class="headerlink" title="3. Align Items"></a>3. Align Items</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstReactNativeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// Try setting `alignItems` to 'flex-start'</span></div><div class="line">      <span class="comment">// Try setting `justifyContent` to `flex-end`.</span></div><div class="line">      <span class="comment">// Try setting `flexDirection` to `row`.</span></div><div class="line">      &lt;View style=&#123;&#123;<span class="attr">flex</span> : <span class="number">1</span>, <span class="attr">flexDirection</span> : <span class="string">'column'</span>, <span class="attr">justifyContent</span> : <span class="string">'center'</span>, <span class="attr">alignItems</span> : <span class="string">'center'</span>&#125;&#125;&gt;</div><div class="line">      &lt;View style=&#123;styles.smallBlue&#125; /&gt;</div><div class="line">      &lt;View style=&#123;styles.middleBlue&#125; /&gt;</div><div class="line">      &lt;View style=&#123;styles.bigBlue&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line"></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    smallBlue : &#123;</div><div class="line">        backgroundColor : 'powderblue',</div><div class="line">        width : 50,</div><div class="line">        height : 50</div><div class="line">    &#125;,</div><div class="line">    middleBlue : &#123;</div><div class="line">        backgroundColor : 'skyblue',</div><div class="line">        width : 50,</div><div class="line">        height : 50</div><div class="line">    &#125;,</div><div class="line">    bigBlue : &#123;</div><div class="line">        backgroundColor : 'steelblue',</div><div class="line">        width : 50,</div><div class="line">        height : 50</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);</div></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f8gjcieq98j20af0j5mxc.jpg" alt="21:01:40.jpg"></p>
<p>More info: <a href="http://facebook.github.io/react-native/docs/layout-props.html" target="_blank" rel="external">Layout Props</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RN(6) Width Height]]></title>
      <url>https://coder-zjq.github.io/2016/10/06/RN(6)_Width_Height/</url>
      <content type="html"><![CDATA[<h2 id="Width-amp-Height"><a href="#Width-amp-Height" class="headerlink" title="Width &amp; Height"></a>Width &amp; Height</h2><h3 id="1-Fixed-Dimensions"><a href="#1-Fixed-Dimensions" class="headerlink" title="1. Fixed Dimensions"></a>1. Fixed Dimensions</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstReactNativeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">      &lt;View style=&#123;styles.smallBlue&#125; /&gt;</div><div class="line">      &lt;View style=&#123;styles.middleBlue&#125; /&gt;</div><div class="line">      &lt;View style=&#123;styles.bigBlue&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    smallBlue : &#123;</div><div class="line">        backgroundColor : 'powderblue',</div><div class="line">        width : 50,</div><div class="line">        height : 50</div><div class="line">    &#125;,</div><div class="line">    middleBlue : &#123;</div><div class="line">        backgroundColor : 'skyblue',</div><div class="line">        width : 100,</div><div class="line">        height : 100</div><div class="line">    &#125;,</div><div class="line">    bigBlue : &#123;</div><div class="line">        backgroundColor : 'steelblue',</div><div class="line">        width : 150,</div><div class="line">        height : 150</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://ww1.sinaimg.cn/large/801b780agw1f8giceqwifj20ae09n3yn.jpg" alt="20:26:58.jpg"></p>
<h3 id="2-Flex-Dimensions"><a href="#2-Flex-Dimensions" class="headerlink" title="2. Flex Dimensions"></a>2. Flex Dimensions</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstReactNativeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;&#123;flex : 1&#125;&#125;&gt;</div><div class="line">        &lt;View style=&#123;styles.smallBlue&#125; /&gt;</div><div class="line">        &lt;View style=&#123;styles.middleBlue&#125; /&gt;</div><div class="line">        &lt;View style=&#123;styles.bigBlue&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line"></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    smallBlue : &#123;</div><div class="line">        backgroundColor : 'powderblue',</div><div class="line">        flex : 1</div><div class="line">    &#125;,</div><div class="line">    middleBlue : &#123;</div><div class="line">        backgroundColor : 'skyblue',</div><div class="line">        flex : 2</div><div class="line">    &#125;,</div><div class="line">    bigBlue : &#123;</div><div class="line">        backgroundColor : 'steelblue',</div><div class="line">        flex : 3</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);</div></pre></td></tr></table></figure>
<p><img src="http://ww2.sinaimg.cn/large/801b780agw1f8giyymu6fj20af0j53yp.jpg" alt="20:48:39.jpg"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RN(5) Style]]></title>
      <url>https://coder-zjq.github.io/2016/10/05/RN(5)_Style/</url>
      <content type="html"><![CDATA[<h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstReactNativeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.justRed&#125;</span>&gt;</span>just red text<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.bigGreen&#125;</span>&gt;</span>just big green text<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;[styles.bigGreen,</span> <span class="attr">styles.justRed</span>]&#125;&gt;</span>big green then red text<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;[styles.justRed,</span> <span class="attr">styles.bigGreen</span>]&#125;&gt;</span>red then big green text<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">    <span class="attr">bigGreen</span> : &#123;</div><div class="line">        <span class="attr">color</span> : <span class="string">'#00ff00'</span>,</div><div class="line">        <span class="attr">fontWeight</span> : <span class="string">'bold'</span>,</div><div class="line">        <span class="attr">fontSize</span> : <span class="number">25</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">justRed</span> : &#123;</div><div class="line">        <span class="attr">color</span> : <span class="string">'red'</span>,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent(<span class="string">'MyFirstReactNativeProject'</span>, () =&gt; MyFirstReactNativeProject);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info about Text style: <a href="http://facebook.github.io/react-native/docs/text.html" target="_blank" rel="external">Text component reference</a></p>
<p><img src="http://ww4.sinaimg.cn/large/801b780agw1f8gi0x8d5jj20ae03yjru.jpg" alt="20:15:56.jpg"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RN(4) State]]></title>
      <url>https://coder-zjq.github.io/2016/10/04/RN(4)_State/</url>
      <content type="html"><![CDATA[<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blink</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">showText</span>: <span class="literal">true</span>&#125;;</div><div class="line">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">showText</span>: !<span class="keyword">this</span>.state.showText&#125;);</div><div class="line">        &#125;, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">let</span> display = <span class="keyword">this</span>.state.showText ? <span class="keyword">this</span>.props.text : <span class="string">''</span>;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;display&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">            );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstReactNativeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Blink text='I love to blink' /&gt;</div><div class="line">        &lt;Blink text='Yes blinking is so great' /&gt;</div><div class="line">        &lt;Blink text='Why did they ever take this out of HTML' /&gt;</div><div class="line">        &lt;Blink text='Look at me look at me look at me' /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://ww2.sinaimg.cn/large/801b780agw1f8fgfoemvsg20ac03yaa4.gif" alt="animation.gif"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RN(3) Props]]></title>
      <url>https://coder-zjq.github.io/2016/10/03/RN(3)_Props/</url>
      <content type="html"><![CDATA[<h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><h3 id="Bananas"><a href="#Bananas" class="headerlink" title="Bananas"></a>Bananas</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Image &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstReactNativeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> pic = &#123;</div><div class="line">        <span class="attr">uri</span> : <span class="string">'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=<span class="string">&#123;pic&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> <span class="attr">193</span>, <span class="attr">height:</span> <span class="attr">110</span>&#125;&#125;/&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://ww4.sinaimg.cn/large/801b780agw1f8felhoiq7j20ad064wes.jpg" alt="21:31:45.jpg"></p>
<h3 id="LotsOfGreetings"><a href="#LotsOfGreetings" class="headerlink" title="LotsOfGreetings"></a>LotsOfGreetings</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstReactNativeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;View style=&#123;&#123;alignItems:'center'&#125;&#125;&gt;</div><div class="line">        &lt;Greeting name='Joker'/&gt;</div><div class="line">        &lt;Greeting name='Peter'/&gt;</div><div class="line">        &lt;Greeting name='Mike'/&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">        );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">class Greeting extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;Text&gt;</div><div class="line">            Hello &#123;this.props.name&#125;! </div><div class="line">            &lt;/Text&gt;</div><div class="line">            );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/801b780agw1f8ffh3akxfj20ac043q32.jpg" alt="22:02:07.jpg"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RN(1) Build The Environment]]></title>
      <url>https://coder-zjq.github.io/2016/10/02/RN(1)_Build_The_Environment/</url>
      <content type="html"><![CDATA[<h3 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h3><ul>
<li><p>安装 Homebrew 以搭建 Node 环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ /usr/bin/ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>利用 Homebrew 安装 Node</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ brew install node</div></pre></td></tr></table></figure>
</li>
<li><p>安装 watchman</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ brew link pcre</div><div class="line">$ brew install watchman</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>安装 React Native 命令行工具：react-native-cli</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install -g react-native-cli</div></pre></td></tr></table></figure>
</li>
<li><p>运行项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 利用安装的 react-native-cli 初始化项目</span></div><div class="line">$ react-native init MyFirstReactNativeProject</div><div class="line"><span class="comment"># 进入项目目录</span></div><div class="line">$ <span class="built_in">cd</span> MyFirstReactNativeProject</div><div class="line"><span class="comment"># 运行项目</span></div><div class="line">$ react-native run-ios</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/801b780agw1f8f4g5mg9hj20g90a6jtd.jpg" alt="15:40:37.jpg"><br><img src="http://ww4.sinaimg.cn/large/801b780agw1f8f4gfp9vyj20af0j50t6.jpg" alt="15:40:54.jpg"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RN(2) Hello World again]]></title>
      <url>https://coder-zjq.github.io/2016/10/02/RN(2)_Hello_World_again/</url>
      <content type="html"><![CDATA[<h3 id="Hello-World-again"><a href="#Hello-World-again" class="headerlink" title="Hello World again"></a>Hello World again</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstReactNativeProject</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span></span></div><div class="line">          Hello World!</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'MyFirstReactNativeProject'</span>, () =&gt; MyFirstReactNativeProject);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f8feglfjvwj20af0j574g.jpg" alt="21:27:02.jpg"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Arrow Function => in ES6]]></title>
      <url>https://coder-zjq.github.io/2016/10/01/ES6_Arrow_Function/</url>
      <content type="html"><![CDATA[<h2 id="Arrow-Function-gt-in-ES6"><a href="#Arrow-Function-gt-in-ES6" class="headerlink" title="Arrow Function =&gt; in ES6"></a>Arrow Function =&gt; in ES6</h2><h3 id="Arrow-Function-syntax"><a href="#Arrow-Function-syntax" class="headerlink" title="Arrow Function syntax"></a>Arrow Function syntax</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> greet = <span class="function"><span class="keyword">function</span> (<span class="params">message, name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> message + name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// arrow function</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arrowGreet1 = <span class="function">(<span class="params">message, name</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> message + name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arrowGreet2 = <span class="function">(<span class="params">message, name</span>) =&gt;</span> message + name;</div><div class="line"></div><div class="line"><span class="keyword">var</span> square = <span class="function"><span class="params">x</span> =&gt;</span> x ^ <span class="number">2</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="this-in-Arrow-Function-syntax"><a href="#this-in-Arrow-Function-syntax" class="headerlink" title="this in Arrow Function syntax"></a><code>this</code> in Arrow Function syntax</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> deliveryBoy = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"Joker"</span>,</div><div class="line">  <span class="attr">handleMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params">message, handler</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> handler(message);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">receive</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">this</span>.handleMessage(<span class="string">"Hello, "</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</div><div class="line">      that.name;   </div><div class="line">      <span class="built_in">console</span>.log(message + that.name);</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">deliveryBoy.receive();</div><div class="line"></div><div class="line"><span class="comment">// arrow function</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arrowDelieveryBoy = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"Joker"</span>,</div><div class="line">  <span class="attr">handleMessage</span>:  <span class="function">(<span class="params">message, handler</span>) =&gt;</span> handler(message),</div><div class="line">  <span class="attr">receive</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.handleMessage(<span class="string">"Hello, "</span>, message =&gt; <span class="built_in">console</span>.log(message + <span class="keyword">this</span>.name));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">arrowDelieveryBoy.receive();</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN 常用指令]]></title>
      <url>https://coder-zjq.github.io/2016/09/15/SVN-code/</url>
      <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn <span class="built_in">help</span></div><div class="line">$ svn <span class="built_in">help</span> <span class="built_in">help</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="导入数据至你的远程版本库"><a href="#导入数据至你的远程版本库" class="headerlink" title="导入数据至你的远程版本库"></a>导入数据至你的远程版本库</h4><ul>
<li><p>导入文件和目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn import [file-path] [svn-path] -m <span class="string">"[message]"</span></div></pre></td></tr></table></figure>
</li>
<li><p>推荐的版本库布局</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn list file:///var/svn/single-project-repo</div><div class="line">trunk/</div><div class="line">branches/</div><div class="line">tags/</div><div class="line">$ svn list file:///var/svn/multi-project-repo</div><div class="line">project-A/</div><div class="line">project-B/</div><div class="line">$ svn list file:///var/svn/multi-project-repo/project-A</div><div class="line">trunk/</div><div class="line">branches/</div><div class="line">tags/</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="从远程版本库导出至本地工作区"><a href="#从远程版本库导出至本地工作区" class="headerlink" title="从远程版本库导出至本地工作区"></a>从远程版本库导出至本地工作区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn checkout [svn-path]</div></pre></td></tr></table></figure>
<h4 id="更新工作区"><a href="#更新工作区" class="headerlink" title="更新工作区"></a>更新工作区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn update</div></pre></td></tr></table></figure>
<h4 id="修改工作区"><a href="#修改工作区" class="headerlink" title="修改工作区"></a>修改工作区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 将文件或文件夹下文件添加至版本库，若只需添加文件夹可以使用 --depth=empth</span></div><div class="line">$ svn add [file-path] | [dir-path]</div><div class="line"><span class="comment"># 从版本库删除</span></div><div class="line">$ svn delete [file-path] | [dir-path]</div><div class="line"><span class="comment"># </span></div><div class="line">$ svn copy</div><div class="line">$ svn move</div><div class="line">$ svn mkdir</div></pre></td></tr></table></figure>
<h4 id="查看修改"><a href="#查看修改" class="headerlink" title="查看修改"></a>查看修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn status</div><div class="line">$ svn status [file-path]</div><div class="line">$ svn status -v</div><div class="line">$ svn status -u -v</div></pre></td></tr></table></figure>
<h4 id="查看修改详情"><a href="#查看修改详情" class="headerlink" title="查看修改详情"></a>查看修改详情</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn diff</div><div class="line">$ svn diff &gt; patchfile</div></pre></td></tr></table></figure>
<h4 id="恢复修改"><a href="#恢复修改" class="headerlink" title="恢复修改"></a>恢复修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn revert</div></pre></td></tr></table></figure>
<p>####</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POP]]></title>
      <url>https://coder-zjq.github.io/2016/09/10/POP/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN 的简单使用]]></title>
      <url>https://coder-zjq.github.io/2016/09/08/SVN/</url>
      <content type="html"><![CDATA[<h3 id="创建代码库"><a href="#创建代码库" class="headerlink" title="创建代码库"></a>创建代码库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svnadmin create /Users/Joker/svn/MyRepo</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="设置代码库权限以及相关配置"><a href="#设置代码库权限以及相关配置" class="headerlink" title="设置代码库权限以及相关配置"></a>设置代码库权限以及相关配置</h3><p>修改代码库文件夹下的 <code>conf/svnserve.conf</code> 文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ vi /Users/Joker/svn/MyRepo/conf/svnserve.conf</div></pre></td></tr></table></figure></p>
<p>删除以下几项前的 <code>#</code> 号，表示代码库可读可写，用户密码等配置在 <code>passwd</code> 文件，授权信息在 <code>authz</code> 文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># anon-access = read  </div><div class="line"># auth-access = write  </div><div class="line"># password-db = passwd  </div><div class="line"># authz-db = authz</div></pre></td></tr></table></figure></p>
<h3 id="配置用户密码等信息"><a href="#配置用户密码等信息" class="headerlink" title="配置用户密码等信息"></a>配置用户密码等信息</h3><p>编辑代码库文件夹下的 <code>conf/passwd</code> 文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ vi /Users/Joker/svn/MyRepo/conf/passwd</div></pre></td></tr></table></figure></p>
<p>在 <code>[users]</code> 标签下添加用户信息，表示账号为：zjq，密码为：123<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[users]</div><div class="line">zjq = 123</div></pre></td></tr></table></figure></p>
<h3 id="配置用户组或用户权限"><a href="#配置用户组或用户权限" class="headerlink" title="配置用户组或用户权限"></a>配置用户组或用户权限</h3><p>编辑代码库文件夹下的 <code>conf/authz</code> 文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ vi /Users/Joker/svn/MyRepo/conf/authz</div></pre></td></tr></table></figure></p>
<p>可以将若干用户分为一组，统一配置权限，<code>[/]</code> 表示代码库下所有文件，<code>rw</code> 表示可读可写<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[groups]</div><div class="line">group1 = zjq, joker</div><div class="line"></div><div class="line">[/]</div><div class="line">@group1 = rw</div></pre></td></tr></table></figure></p>
<p>也可以单独给用户配置权限，注意给用户单独配置权限不需要 <code>@</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[/]</div><div class="line">zjq = rw</div></pre></td></tr></table></figure></p>
<h3 id="启动-SVN-服务器"><a href="#启动-SVN-服务器" class="headerlink" title="启动 SVN 服务器"></a>启动 SVN 服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svnserve <span class="_">-d</span> -r /Users/Joker/svn/MyRepo</div></pre></td></tr></table></figure>
<h3 id="使用-SVN"><a href="#使用-SVN" class="headerlink" title="使用 SVN"></a>使用 SVN</h3><h4 id="从本地导入代码至服务器"><a href="#从本地导入代码至服务器" class="headerlink" title="从本地导入代码至服务器"></a>从本地导入代码至服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn import [file-path] [server-path] --username=zjq --password=123 -m <span class="string">"initialize"</span></div></pre></td></tr></table></figure>
<h4 id="从服务器下载代码至本地代码库"><a href="#从服务器下载代码至本地代码库" class="headerlink" title="从服务器下载代码至本地代码库"></a>从服务器下载代码至本地代码库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn checkout [server-path] --username=zjq --password=123 [repo-path]</div></pre></td></tr></table></figure>
<h4 id="提交修改至服务器"><a href="#提交修改至服务器" class="headerlink" title="提交修改至服务器"></a>提交修改至服务器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ svn commit -m &quot;modified the file&quot;</div></pre></td></tr></table></figure>
<h4 id="更新服务器代码至本地代码库"><a href="#更新服务器代码至本地代码库" class="headerlink" title="更新服务器代码至本地代码库"></a>更新服务器代码至本地代码库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn update</div></pre></td></tr></table></figure>
<h4 id="查看帮助信息"><a href="#查看帮助信息" class="headerlink" title="查看帮助信息"></a>查看帮助信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ svn <span class="built_in">help</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MJExtension 的使用]]></title>
      <url>https://coder-zjq.github.io/2016/09/06/MJExtension/</url>
      <content type="html"><![CDATA[<h3 id="Define-the-models"><a href="#Define-the-models" class="headerlink" title="Define the models"></a>Define the models</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Define JQPerson model</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">JQChild</span>;</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, JQSex) &#123;</div><div class="line">    JQSexMale = <span class="number">0</span>,</div><div class="line">    JQSexFemale,</div><div class="line">    JQSexUnknown</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQPerson</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) JQSex sex;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *address;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">getter</span>=isMarried) <span class="built_in">BOOL</span> marriage;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) JQChild *child;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/**************************************************************/</span></div><div class="line"></div><div class="line"><span class="comment">// Define JQChild model</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQChild</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="JSON-gt-Model-mj-objectWithKeyValues"><a href="#JSON-gt-Model-mj-objectWithKeyValues" class="headerlink" title="JSON -&gt; Model: + mj_objectWithKeyValues"></a>JSON -&gt; Model: <code>+ mj_objectWithKeyValues</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Define a JSON dictionary</span></div><div class="line"><span class="built_in">NSDictionary</span> *personDict = @&#123;</div><div class="line">                                 <span class="string">@"name"</span>:<span class="string">@"zjq"</span>,</div><div class="line">                                 <span class="string">@"age"</span>:@(<span class="number">24</span>),</div><div class="line">                                 <span class="string">@"sex"</span>:@(JQSexMale),</div><div class="line">                                 <span class="string">@"address"</span>:<span class="string">@"FuZhou"</span>,</div><div class="line">                                 <span class="string">@"marriage"</span>:<span class="string">@"false"</span></div><div class="line">                                 &#125;;</div><div class="line"></div><div class="line"><span class="comment">// JSON -&gt; JQPerson</span></div><div class="line">JQPerson *person = [JQPerson mj_objectWithKeyValues:personDict];</div><div class="line"></div><div class="line"><span class="comment">// Print</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name:%@, age:%ld, sex:%ld, address:%@, marriage:%d."</span>, person.name, person.age, person.sex, person.address, person.marriage);</div><div class="line"><span class="comment">// name:zjq, age:24, sex:0, address:FuZhou, marriage:0.</span></div></pre></td></tr></table></figure>
<h3 id="JSONString-gt-Model-mj-objectWithKeyValues"><a href="#JSONString-gt-Model-mj-objectWithKeyValues" class="headerlink" title="JSONString -&gt; Model: + mj_objectWithKeyValues"></a>JSONString -&gt; Model: <code>+ mj_objectWithKeyValues</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Define a JSON string</span></div><div class="line"><span class="built_in">NSString</span> *personStr = <span class="string">@"&#123;\"name\":\"zjq\", \"age\":24, \"sex\":0, \"address\":\"FuZhou\", \"marriage\":\"false\"&#125;"</span>;</div><div class="line"></div><div class="line"><span class="comment">// JSONString -&gt; Model</span></div><div class="line">JQPerson *person = [JQPerson mj_objectWithKeyValues:personDict]; </div><div class="line"></div><div class="line"><span class="comment">// Print   </span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name:%@, age:%ld, sex:%ld, address:%@, marriage:%d."</span>, person.name, person.age, person.sex, person.address, person.marriage);</div><div class="line"><span class="comment">// name:zjq, age:24, sex:0, address:FuZhou, marriage:0.</span></div></pre></td></tr></table></figure>
<h3 id="Model-contains-model-mj-objectWithKeyValues"><a href="#Model-contains-model-mj-objectWithKeyValues" class="headerlink" title="Model contains model: + mj_objectWithKeyValues"></a>Model contains model: <code>+ mj_objectWithKeyValues</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Define a JSON dictionary</span></div><div class="line"><span class="built_in">NSDictionary</span> *personDict = @&#123;</div><div class="line">                                 <span class="string">@"name"</span>:<span class="string">@"zjt"</span>,</div><div class="line">                                 <span class="string">@"age"</span>:@(<span class="number">31</span>),</div><div class="line">                                 <span class="string">@"sex"</span>:@(JQSexMale),</div><div class="line">                                 <span class="string">@"address"</span>:<span class="string">@"FuZhou"</span>,</div><div class="line">                                 <span class="string">@"marriage"</span>:<span class="string">@"true"</span>,</div><div class="line">                                 <span class="string">@"child"</span>:@&#123;</div><div class="line">                                         <span class="string">@"name"</span>:<span class="string">@"zje"</span>,</div><div class="line">                                         <span class="string">@"age"</span>:@(<span class="number">2</span>)</div><div class="line">                                         &#125;</div><div class="line">                                 &#125;;</div><div class="line"></div><div class="line"><span class="comment">// JSON -&gt; JQPerson</span></div><div class="line">JQPerson *person = [JQPerson mj_objectWithKeyValues:personDict];  </div><div class="line"></div><div class="line"><span class="comment">// Print </span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name:%@, age:%ld, sex:%ld, address:%@, marriage:%d, childname:%@, childage:%ld."</span>, person.name, person.age, person.sex, person.address, person.marriage, person.child.name, person.child.age);</div><div class="line"><span class="comment">// name:zjt, age:31, sex:0, address:FuZhou, marriage:1, childname:zje, childage:2.</span></div></pre></td></tr></table></figure>
<h3 id="Model-gt-JSON-mj-keyValues"><a href="#Model-gt-JSON-mj-keyValues" class="headerlink" title="Model -&gt; JSON: - mj_keyValues"></a>Model -&gt; JSON: <code>- mj_keyValues</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// New model</span></div><div class="line">User *user = [[User alloc] init];</div><div class="line">user.name = <span class="string">@"Jack"</span>;</div><div class="line">user.icon = <span class="string">@"lufy.png"</span>;</div><div class="line"></div><div class="line">Status *status = [[Status alloc] init];</div><div class="line">status.user = user;</div><div class="line">status.text = <span class="string">@"Nice mood!"</span>;</div><div class="line"></div><div class="line"><span class="comment">// Status -&gt; JSON</span></div><div class="line"><span class="built_in">NSDictionary</span> *statusDict = status.mj_keyValues;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, statusDict);</div><div class="line"><span class="comment">/*</span></div><div class="line"> &#123;</div><div class="line"> text = "Nice mood!";</div><div class="line"> user =     &#123;</div><div class="line"> icon = "lufy.png";</div><div class="line"> name = Jack;</div><div class="line"> &#125;;</div><div class="line"> &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// More complex situation</span></div><div class="line">Student *stu = [[Student alloc] init];</div><div class="line">stu.ID = <span class="string">@"123"</span>;</div><div class="line">stu.oldName = <span class="string">@"rose"</span>;</div><div class="line">stu.nowName = <span class="string">@"jack"</span>;</div><div class="line">stu.desc = <span class="string">@"handsome"</span>;</div><div class="line">stu.nameChangedTime = <span class="string">@"2018-09-08"</span>;</div><div class="line"></div><div class="line">Bag *bag = [[Bag alloc] init];</div><div class="line">bag.name = <span class="string">@"a red bag"</span>;</div><div class="line">bag.price = <span class="number">205</span>;</div><div class="line">stu.bag = bag;</div><div class="line"></div><div class="line"><span class="built_in">NSDictionary</span> *stuDict = stu.mj_keyValues;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, stuDict);</div><div class="line"><span class="comment">/*</span></div><div class="line">&#123;</div><div class="line">    ID = 123;</div><div class="line">    bag =     &#123;</div><div class="line">        name = "\U5c0f\U4e66\U5305";</div><div class="line">        price = 205;</div><div class="line">    &#125;;</div><div class="line">    desc = handsome;</div><div class="line">    nameChangedTime = "2018-09-08";</div><div class="line">    nowName = jack;</div><div class="line">    oldName = rose;</div><div class="line">&#125;</div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="Model-contains-model-array-mj-objectClassInArray-mj-setupObjectClassInArray"><a href="#Model-contains-model-array-mj-objectClassInArray-mj-setupObjectClassInArray" class="headerlink" title="Model contains model array: + mj_objectClassInArray; + mj_setupObjectClassInArray:;"></a>Model contains model array: <code>+ mj_objectClassInArray; + mj_setupObjectClassInArray:;</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Change The child model to childs array</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQPerson</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) JQSex sex;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *address;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">getter</span>=isMarried) <span class="built_in">BOOL</span> marriage;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *childs;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// JQPerson.m implements +mj_objectClassInArray method to tell MJExtension what type model will be contained in childs</span></div><div class="line">+ (<span class="built_in">NSDictionary</span> *)mj_objectClassInArray &#123;</div><div class="line">    <span class="keyword">return</span> @&#123;</div><div class="line">             <span class="string">@"childs"</span>:<span class="string">@"JQChild"</span></div><div class="line">             &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Or setup by this before serialization</span></div><div class="line">[JQPerson mj_setupObjectClassInArray:^<span class="built_in">NSDictionary</span> *&#123;</div><div class="line">        <span class="keyword">return</span> @&#123;<span class="string">@"childs"</span>:<span class="string">@"JQChild"</span>&#125;;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line"><span class="comment">/**************************************************************/</span></div><div class="line"></div><div class="line"><span class="comment">// Define a JSON dictionary</span></div><div class="line"><span class="built_in">NSDictionary</span> *personDict = @&#123;</div><div class="line">                             <span class="string">@"name"</span>:<span class="string">@"zjt"</span>,</div><div class="line">                             <span class="string">@"age"</span>:@(<span class="number">31</span>),</div><div class="line">                             <span class="string">@"sex"</span>:@(JQSexMale),</div><div class="line">                             <span class="string">@"address"</span>:<span class="string">@"FuZhou"</span>,</div><div class="line">                             <span class="string">@"marriage"</span>:<span class="string">@"true"</span>,</div><div class="line">                             <span class="string">@"childs"</span>:@[@&#123;</div><div class="line">                                            <span class="string">@"name"</span>:<span class="string">@"zje"</span>,</div><div class="line">                                            <span class="string">@"age"</span>:@(<span class="number">2</span>)</div><div class="line">                                            &#125;,</div><div class="line">                                        @&#123;</div><div class="line">                                            <span class="string">@"name"</span>:<span class="string">@"zjj"</span>,</div><div class="line">                                            <span class="string">@"age"</span>:@(<span class="number">4</span>)</div><div class="line">                                            &#125;]</div><div class="line">                             &#125;;</div><div class="line"></div><div class="line"><span class="comment">// JSON -&gt; Model</span></div><div class="line">JQPerson *person = [JQPerson mj_objectWithKeyValues:personDict];</div><div class="line"></div><div class="line"><span class="comment">// Print</span></div><div class="line"><span class="keyword">for</span> (JQChild *child <span class="keyword">in</span> person.childs) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"childname:%@, childage:%ld\n"</span>, child.name, child.age);</div><div class="line">&#125;</div><div class="line"><span class="comment">// childname:zje, childage:2</span></div><div class="line"><span class="comment">// childname:zjj, childage:4</span></div></pre></td></tr></table></figure>
<h3 id="JSON-array-gt-model-array-mj-objectArrayWithKeyValuesArray"><a href="#JSON-array-gt-model-array-mj-objectArrayWithKeyValuesArray" class="headerlink" title="JSON array -&gt; model array: + mj_objectArrayWithKeyValuesArray"></a>JSON array -&gt; model array: <code>+ mj_objectArrayWithKeyValuesArray</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *dictArray = @[</div><div class="line">                         @&#123;</div><div class="line">                             <span class="string">@"name"</span> : <span class="string">@"Jack"</span>,</div><div class="line">                             <span class="string">@"icon"</span> : <span class="string">@"lufy.png"</span></div><div class="line">                         &#125;,</div><div class="line">                         @&#123;</div><div class="line">                             <span class="string">@"name"</span> : <span class="string">@"Rose"</span>,</div><div class="line">                             <span class="string">@"icon"</span> : <span class="string">@"nami.png"</span></div><div class="line">                         &#125;</div><div class="line">                     ];</div><div class="line"></div><div class="line"><span class="comment">// JSON array -&gt; User array</span></div><div class="line"><span class="built_in">NSArray</span> *userArray = [User mj_objectArrayWithKeyValuesArray:dictArray];</div><div class="line"></div><div class="line"><span class="comment">// Printing</span></div><div class="line"><span class="keyword">for</span> (User *user <span class="keyword">in</span> userArray) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"name=%@, icon=%@"</span>, user.name, user.icon);</div><div class="line">&#125;</div><div class="line"><span class="comment">// name=Jack, icon=lufy.png</span></div><div class="line"><span class="comment">// name=Rose, icon=nami.png</span></div></pre></td></tr></table></figure>
<h3 id="Model-array-gt-JSON-array-mj-keyValuesArrayWithObjectArray"><a href="#Model-array-gt-JSON-array-mj-keyValuesArrayWithObjectArray" class="headerlink" title="Model array -&gt; JSON array: + mj_keyValuesArrayWithObjectArray"></a>Model array -&gt; JSON array: <code>+ mj_keyValuesArrayWithObjectArray</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// New model array</span></div><div class="line">User *user1 = [[User alloc] init];</div><div class="line">user1.name = <span class="string">@"Jack"</span>;</div><div class="line">user1.icon = <span class="string">@"lufy.png"</span>;</div><div class="line"></div><div class="line">User *user2 = [[User alloc] init];</div><div class="line">user2.name = <span class="string">@"Rose"</span>;</div><div class="line">user2.icon = <span class="string">@"nami.png"</span>;</div><div class="line"></div><div class="line"><span class="built_in">NSArray</span> *userArray = @[user1, user2];</div><div class="line"></div><div class="line"><span class="comment">// Model array -&gt; JSON array</span></div><div class="line"><span class="built_in">NSArray</span> *dictArray = [User mj_keyValuesArrayWithObjectArray:userArray];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, dictArray);</div><div class="line"><span class="comment">/*</span></div><div class="line"> (</div><div class="line"> &#123;</div><div class="line"> icon = "lufy.png";</div><div class="line"> name = Jack;</div><div class="line"> &#125;,</div><div class="line"> &#123;</div><div class="line"> icon = "nami.png";</div><div class="line"> name = Rose;</div><div class="line"> &#125;</div><div class="line"> )</div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="Model-name-JSON-key-mapping-mj-replacedKeyFromPropertyName-mj-setupReplacedKeyFromPropertyName"><a href="#Model-name-JSON-key-mapping-mj-replacedKeyFromPropertyName-mj-setupReplacedKeyFromPropertyName" class="headerlink" title="Model name - JSON key mapping: + mj_replacedKeyFromPropertyName; + mj_setupReplacedKeyFromPropertyName;"></a>Model name - JSON key mapping: <code>+ mj_replacedKeyFromPropertyName; + mj_setupReplacedKeyFromPropertyName;</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Change the childs array to childname string</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQPerson</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) JQSex sex;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *address;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">getter</span>=isMarried) <span class="built_in">BOOL</span> marriage;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *childname;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// JQPerson.m implements +mj_replacedKeyFromPropertyName method to tell MJExtension how to map</span></div><div class="line">+ (<span class="built_in">NSDictionary</span> *)mj_replacedKeyFromPropertyName &#123;</div><div class="line">    <span class="keyword">return</span> @&#123;<span class="string">@"childname"</span>:<span class="string">@"child.name"</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Or setup by this before serialization</span></div><div class="line">[JQPerson mj_setupReplacedKeyFromPropertyName:^<span class="built_in">NSDictionary</span> *&#123;</div><div class="line">        <span class="keyword">return</span> @&#123;<span class="string">@"childname"</span>:<span class="string">@"child.name"</span>&#125;;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line"><span class="comment">/**************************************************************/</span></div><div class="line"></div><div class="line"><span class="comment">// Define a JSON dictionary</span></div><div class="line"><span class="built_in">NSDictionary</span> *personDict = @&#123;</div><div class="line">                                 <span class="string">@"name"</span>:<span class="string">@"zjt"</span>,</div><div class="line">                                 <span class="string">@"age"</span>:@(<span class="number">31</span>),</div><div class="line">                                 <span class="string">@"sex"</span>:@(JQSexMale),</div><div class="line">                                 <span class="string">@"address"</span>:<span class="string">@"FuZhou"</span>,</div><div class="line">                                 <span class="string">@"marriage"</span>:<span class="string">@"true"</span>,</div><div class="line">                                 <span class="string">@"child"</span>:@&#123;</div><div class="line">                                         <span class="string">@"name"</span>:<span class="string">@"zje"</span>,</div><div class="line">                                         <span class="string">@"age"</span>:@(<span class="number">2</span>)</div><div class="line">                                         &#125;</div><div class="line">                                 &#125;;</div><div class="line"></div><div class="line"><span class="comment">// JSON -&gt; JQPerson</span></div><div class="line">JQPerson *person = [JQPerson mj_objectWithKeyValues:personDict];   </div><div class="line"></div><div class="line"><span class="comment">// Print </span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"childname:%@"</span>, person.childname);</div><div class="line"><span class="comment">// childname:zje</span></div></pre></td></tr></table></figure>
<h3 id="NSCoding-MJExtensionCodingImplementation-mj-setupIgnoredCodingPropertyNames"><a href="#NSCoding-MJExtensionCodingImplementation-mj-setupIgnoredCodingPropertyNames" class="headerlink" title="NSCoding: MJExtensionCodingImplementation, + mj_setupIgnoredCodingPropertyNames:;"></a>NSCoding: <code>MJExtensionCodingImplementation, + mj_setupIgnoredCodingPropertyNames:;</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"MJExtension.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Bag</span></span></div><div class="line"><span class="comment">// NSCoding Implementation</span></div><div class="line">MJExtensionCodingImplementation</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/***********************************************/</span></div><div class="line"></div><div class="line"><span class="comment">// what properties not to be coded</span></div><div class="line">[Bag mj_setupIgnoredCodingPropertyNames:^<span class="built_in">NSArray</span> *&#123;</div><div class="line">    <span class="keyword">return</span> @[<span class="string">@"name"</span>];</div><div class="line">&#125;];</div><div class="line"><span class="comment">// Equals: Bag.m implements +mj_ignoredCodingPropertyNames method.</span></div><div class="line"></div><div class="line"><span class="comment">// Create model</span></div><div class="line">Bag *bag = [[Bag alloc] init];</div><div class="line">bag.name = <span class="string">@"Red bag"</span>;</div><div class="line">bag.price = <span class="number">200.8</span>;</div><div class="line"></div><div class="line"><span class="built_in">NSString</span> *file = [<span class="built_in">NSHomeDirectory</span>() stringByAppendingPathComponent:<span class="string">@"Desktop/bag.data"</span>];</div><div class="line"><span class="comment">// Encoding</span></div><div class="line">[<span class="built_in">NSKeyedArchiver</span> archiveRootObject:bag toFile:file];</div><div class="line"></div><div class="line"><span class="comment">// Decoding</span></div><div class="line">Bag *decodedBag = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithFile:file];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name=%@, price=%f"</span>, decodedBag.name, decodedBag.price);</div><div class="line"><span class="comment">// name=(null), price=200.800000</span></div></pre></td></tr></table></figure>
<h3 id="NSString-gt-NSDate-nil-gt-””-mj-newValueFromOldValue-property"><a href="#NSString-gt-NSDate-nil-gt-””-mj-newValueFromOldValue-property" class="headerlink" title="NSString -&gt; NSDate, nil -&gt; @””: - mj_newValueFromOldValue:property:"></a>NSString -&gt; NSDate, nil -&gt; @””: <code>- mj_newValueFromOldValue:property:</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Book</span></div><div class="line"><span class="meta">#import <span class="meta-string">"MJExtension.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Book</span></span></div><div class="line">- (<span class="keyword">id</span>)mj_newValueFromOldValue:(<span class="keyword">id</span>)oldValue property:(MJProperty *)property</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([property.name isEqualToString:<span class="string">@"publisher"</span>]) &#123;</div><div class="line">        <span class="keyword">if</span> (oldValue == <span class="literal">nil</span>) <span class="keyword">return</span> <span class="string">@""</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (property.type.typeClass == [<span class="built_in">NSDate</span> <span class="keyword">class</span>]) &#123;</div><div class="line">        <span class="built_in">NSDateFormatter</span> *fmt = [[<span class="built_in">NSDateFormatter</span> alloc] init];</div><div class="line">        fmt.dateFormat = <span class="string">@"yyyy-MM-dd"</span>;</div><div class="line">        <span class="keyword">return</span> [fmt dateFromString:oldValue];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// NSDictionary</span></div><div class="line"><span class="built_in">NSDictionary</span> *dict = @&#123;</div><div class="line">                       <span class="string">@"name"</span> : <span class="string">@"5分钟突破iOS开发"</span>,</div><div class="line">                       <span class="string">@"publishedTime"</span> : <span class="string">@"2011-09-10"</span></div><div class="line">                       &#125;;</div><div class="line"><span class="comment">// NSDictionary -&gt; Book</span></div><div class="line">Book *book = [Book mj_objectWithKeyValues:dict];</div><div class="line"></div><div class="line"><span class="comment">// printing</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name=%@, publisher=%@, publishedTime=%@"</span>, book.name, book.publisher, book.publishedTime);</div></pre></td></tr></table></figure>
<hr>
<p><a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="external">MJExtension</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIWebView 的简单使用]]></title>
      <url>https://coder-zjq.github.io/2016/08/30/UIWebView/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>你可以在你的 APP 中使用 UIWebView 内嵌网页内容，你也可以在网页浏览历史中前进或后退，甚至利用代码改变网页内容。除了 HTML 网页以外，UIWebView 还可以用来展示其它内容，例如：Keynote、PDF 以及 Pages 文档，但是为了富文本的更好渲染，还是最好使用 UITextView。</p>
</blockquote>
<a id="more"></a>
<hr>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="加载页面"><a href="#加载页面" class="headerlink" title="加载页面"></a>加载页面</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  通过 URL 请求加载页面</div><div class="line"> *</div><div class="line"> *  @param request URL 请求，其中 URL 可以为加载文件的路径</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)loadRequest:(<span class="built_in">NSURLRequest</span> *)request;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  通过载入一段 HTML 字符串加载页面</div><div class="line"> *</div><div class="line"> *  @param string  HTML 字符串</div><div class="line"> *  @param baseURL 基本路径，用于寻找页面中图片等资源</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)loadHTMLString:(<span class="built_in">NSString</span> *)string baseURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)baseURL;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  通过二进制数据加载页面（较少用）</div><div class="line"> *</div><div class="line"> *  @param data             数据</div><div class="line"> *  @param MIMEType         数据类型</div><div class="line"> *  @param textEncodingName 数据编码形式</div><div class="line"> *  @param baseURL          基本路径，用于寻找页面中图片等资源</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)loadData:(<span class="built_in">NSData</span> *)data MIMEType:(<span class="built_in">NSString</span> *)MIMEType textEncodingName:(<span class="built_in">NSString</span> *)textEncodingName baseURL:(<span class="built_in">NSURL</span> *)baseURL;</div></pre></td></tr></table></figure>
<h4 id="UIWebViewDelegate-代理"><a href="#UIWebViewDelegate-代理" class="headerlink" title="UIWebViewDelegate 代理"></a>UIWebViewDelegate 代理</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  是否根据请求开始加载页面</div><div class="line"> *</div><div class="line"> *  @param webView        显示页面的 UIWebView</div><div class="line"> *  @param request        加载的请求</div><div class="line"> *  @param navigationType 用户行为类型</div><div class="line"> *</div><div class="line"> *  @return     YES：加载页面</div><div class="line">                NO：不加载页面</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  WebView 已经开始加载页面</div><div class="line"> *</div><div class="line"> *  @param webView 显示页面的 WebView</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)webViewDidStartLoad:(<span class="built_in">UIWebView</span> *)webView;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  WebView 已经结束加载页面</div><div class="line"> *</div><div class="line"> *  @param webView 显示页面的 WebView</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  WebView 加载页面失败</div><div class="line"> *</div><div class="line"> *  @param webView 显示页面的 WebView</div><div class="line"> *  @param error   错误信息</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">UIWebView</span> *)webView didFailLoadWithError:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error;</div></pre></td></tr></table></figure>
<p>####相关属性<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/** UIWebViewDelegate 代理 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">id</span> &lt;<span class="built_in">UIWebViewDelegate</span>&gt; delegate;</div><div class="line"><span class="comment">/** 内嵌的 UIScrollView */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UIScrollView</span> *scrollView <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"><span class="comment">/** 载入的请求 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLRequest</span> *request;</div><div class="line"><span class="comment">/** 当前页面是否可以后退 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span>=canGoBack) <span class="built_in">BOOL</span> canGoBack;</div><div class="line"><span class="comment">/** 当前界面是否可以前进 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span>=canGoForward) <span class="built_in">BOOL</span> canGoForward;</div><div class="line"><span class="comment">/** 当前页面是否正在加载 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span>=isLoading) <span class="built_in">BOOL</span> loading;</div><div class="line"><span class="comment">/** 设置页面是否缩放至屏幕大小 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> scalesPageToFit;</div><div class="line"><span class="comment">/** 已弃用 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> detectsPhoneNumbers <span class="built_in">NS_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">3</span>_0);</div><div class="line"><span class="comment">/** 设置可转换成链接的类型 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIDataDetectorTypes</span> dataDetectorTypes <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">/** 设置是否使用内联播放器播放，iPad 默认为 YES，iPhone 默认为 NO */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsInlineMediaPlayback <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">4</span>_0);</div><div class="line"><span class="comment">/** 设置播放器自动播放还是需用户点击，iPad 及iPhone 默认均为 YES */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> mediaPlaybackRequiresUserAction <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">4</span>_0); </div><div class="line"><span class="comment">/** 设置是否支持 Air Play，iPad 及 iPhone 默认均为 YES */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> mediaPlaybackAllowsAirPlay <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0); </div><div class="line"><span class="comment">/** 设置是否将数据加载入内存后渲染界面，iPhone 及 iPad 默认均为 NO */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> suppressesIncrementalRendering <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0); </div><div class="line"><span class="comment">/** 是否自动展示键盘，默认为 YES */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> keyboardDisplayRequiresUserAction <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0); </div><div class="line"><span class="comment">/** 设置当网页的大小超出view时的分页显示模式 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIWebPaginationMode</span> paginationMode <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">/** 这个属性决定了CSS属性是采用column-break 还是page-breaking样式 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIWebPaginationBreakingMode</span> paginationBreakingMode <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">/** 分页长度 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> pageLength <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">/** 多个页面之间差距值 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> gapBetweenPages <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">/** 分页个数 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSUInteger</span> pageCount <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">/** 设置多媒体播放是否支持画中画 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsPictureInPictureMediaPlayback <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</div><div class="line"><span class="comment">/** 设置是否支持链接预览 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsLinkPreview <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0); <span class="comment">// default is NO</span></div></pre></td></tr></table></figure></p>
<h4 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  重新加载页面</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)reload;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  停止加载页面</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)stopLoading;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  返回至上一个页面，可以配合 canGoBack 属性使用</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)goBack;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  前进至刚才的页面，可以配合 canGoForward 属性使用</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)goForward;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  通过 JavaScript 获取页面字符串，可以通过该方法注入 JavaScript 改变页面</div><div class="line"> *</div><div class="line"> *  @param script JavaScript 字符串</div><div class="line"> *</div><div class="line"> *  @return 获得的字符串</div><div class="line"> */</div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)stringByEvaluatingJavaScriptFromString:(<span class="built_in">NSString</span> *)script;</div></pre></td></tr></table></figure>
<h4 id="各枚举类型"><a href="#各枚举类型" class="headerlink" title="各枚举类型"></a>各枚举类型</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  用户触发行为类型</div><div class="line"> */</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIWebViewNavigationType</span>) &#123;</div><div class="line">    <span class="built_in">UIWebViewNavigationTypeLinkClicked</span>,     <span class="comment">//用户触发了一个链接</span></div><div class="line">    <span class="built_in">UIWebViewNavigationTypeFormSubmitted</span>,   <span class="comment">//用户提交了一个表单</span></div><div class="line">    <span class="built_in">UIWebViewNavigationTypeBackForward</span>,     <span class="comment">//用户触击前进前进或返回按钮</span></div><div class="line">    <span class="built_in">UIWebViewNavigationTypeReload</span>,          <span class="comment">//用户触击重新加载的按钮</span></div><div class="line">    <span class="built_in">UIWebViewNavigationTypeFormResubmitted</span>, <span class="comment">//用户重复提交表单</span></div><div class="line">    <span class="built_in">UIWebViewNavigationTypeOther</span>            <span class="comment">//发生了其他行为</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  可转换为链接的类型</div><div class="line"> */</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">UIDataDetectorTypes</span>) &#123;</div><div class="line">    <span class="built_in">UIDataDetectorTypePhoneNumber</span>       <span class="comment">// 电话号码</span></div><div class="line">    <span class="built_in">UIDataDetectorTypeLink</span>              <span class="comment">// URL 链接</span></div><div class="line">    <span class="built_in">UIDataDetectorTypeAddress</span>           <span class="comment">// 地址</span></div><div class="line">    <span class="built_in">UIDataDetectorTypeCalendarEvent</span>     <span class="comment">// 日程</span></div><div class="line">    <span class="built_in">UIDataDetectorTypeNone</span>              <span class="comment">// 不转换</span></div><div class="line">    <span class="built_in">UIDataDetectorTypeAll</span>               <span class="comment">// 全转换</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  页面分页模式</div><div class="line"> */</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIWebPaginationMode</span>) &#123;</div><div class="line">    <span class="built_in">UIWebPaginationModeUnpaginated</span>,     <span class="comment">//不使用分页效果</span></div><div class="line">    <span class="built_in">UIWebPaginationModeLeftToRight</span>,     <span class="comment">//将网页超出部分分页，从左向右进行翻页</span></div><div class="line">    <span class="built_in">UIWebPaginationModeTopToBottom</span>,     <span class="comment">//将网页超出部分分页，从上向下进行翻页</span></div><div class="line">    <span class="built_in">UIWebPaginationModeBottomToTop</span>,     <span class="comment">//将网页超出部分分页，从下向上进行翻页</span></div><div class="line">    <span class="built_in">UIWebPaginationModeRightToLeft</span>      <span class="comment">//将网页超出部分分页，从右向左进行翻页</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  这个枚举决定了webView加载页面具有CSS属性时是使用页的样式还是以列的样式。</div><div class="line"> */</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIWebPaginationBreakingMode</span>) &#123;</div><div class="line">    <span class="built_in">UIWebPaginationBreakingModePage</span>,    <span class="comment">//默认设置是这个属性，CSS属性以页样式。</span></div><div class="line">    <span class="built_in">UIWebPaginationBreakingModeColumn</span>   <span class="comment">//当UIWebPaginationBreakingMode 设置这个属性的时候，这个页面内容 CSS 属性以 column-break 代替 page-breaking 样式。</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li>不可以将 UIWebView 或者 UITableView 内嵌至 UIScrollView 对象，因为触摸事件会在两个对象间混乱，因而作出错误的操作；</li>
<li>如果是运行在 iOS 8 以上的系统可以使用 WKWebView 取代 UIWebView。</li>
</ul>
<hr>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>可以结合一下第三方类库使用：   </p>
<ul>
<li><a href="https://github.com/ninjinkun/NJKWebViewProgress" target="_blank" rel="external">NJKWebViewProgress</a>：页面加载进度显示；   </li>
<li><a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="external">WebViewJavascriptBridge</a>：用于 Objective-C ↔ JavaScript 之间的交互。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NJKWebViewProgress 的使用]]></title>
      <url>https://coder-zjq.github.io/2016/08/30/NJKWebViewProgress/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">pod <span class="string">'NJKWebViewProgress'</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="导包并遵循协议"><a href="#导包并遵循协议" class="headerlink" title="导包并遵循协议"></a>导包并遵循协议</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"NJKWebViewProgress.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"NJKWebViewProgressView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">NJKWebViewProgressDelegate</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIWebView</span> *pageLoadedWV;               <span class="comment">/**&lt; 显示加载页面的 WebView */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> NJKWebViewProgressView *pageLoadPV;    <span class="comment">/**&lt; 显示加载进度的 ProgressView */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) NJKWebViewProgress *progressProxy;            <span class="comment">/**&lt; 处理加载进度代理 */</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="设置代理并加载界面"><a href="#设置代理并加载界面" class="headerlink" title="设置代理并加载界面"></a>设置代理并加载界面</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// 设置代理</span></div><div class="line">    <span class="keyword">self</span>.pageLoadedWV.delegate = <span class="keyword">self</span>.progressProxy;</div><div class="line">    <span class="keyword">self</span>.progressProxy.progressDelegate = <span class="keyword">self</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 通过请求加载页面</span></div><div class="line">    [<span class="keyword">self</span>.pageLoadedWV loadRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://coder-zjq.me"</span>]]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="更新加载进度"><a href="#更新加载进度" class="headerlink" title="更新加载进度"></a>更新加载进度</h4><h5 id="通过代理"><a href="#通过代理" class="headerlink" title="通过代理"></a>通过代理</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark <span class="meta-string">&lt;NJKWebViewProgressDelegate&gt;</span></span></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  更新加载进度</div><div class="line"> *</div><div class="line"> *  @param webViewProgress NJKWebViewProgress 对象</div><div class="line"> *  @param progress        当前加载进度</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)webViewProgress:(NJKWebViewProgress *)webViewProgress updateProgress:(<span class="keyword">float</span>)progress &#123;</div><div class="line">    <span class="keyword">self</span>.pageLoadPV.hidden = (progress == <span class="number">1.0</span>);</div><div class="line">    [<span class="keyword">self</span>.pageLoadPV setProgress:progress animated:<span class="literal">YES</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="通过-block-回调"><a href="#通过-block-回调" class="headerlink" title="通过 block 回调"></a>通过 block 回调</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</div><div class="line"><span class="keyword">self</span>.progressProxy.progressBlock = ^(<span class="keyword">float</span> progress) &#123;</div><div class="line">    weakSelf.pageLoadPV.hidden = (progress == <span class="number">1.0</span>);</div><div class="line">    [weakSelf.pageLoadPV setProgress:progress animated:<span class="literal">YES</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://ww2.sinaimg.cn/large/801b780agw1f7bs74x4ltj208w0get9f.jpg" alt="效果"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[block 的使用]]></title>
      <url>https://coder-zjq.github.io/2016/08/27/block/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li><code>return_type</code>：你所想要返回的数据类型；</li>
<li><code>blockName</code>：你所构造的 block 名；</li>
<li><code>var_type</code>：你所要传递的变量类型；</li>
<li><code>varName</code>：你所要传递的变量名。</li>
</ul>
<a id="more"></a>
<p>（另外参数可以传入多个）</p>
<h3 id="作为变量"><a href="#作为变量" class="headerlink" title="作为变量"></a>作为变量</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">return_type (^blockName)(var_type) = ^return_type (var_type varName)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Your code here...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="作为属性"><a href="#作为属性" class="headerlink" title="作为属性"></a>作为属性</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) return_type (^blockName) (var_type);</div></pre></td></tr></table></figure>
<h3 id="作为方法定义参数"><a href="#作为方法定义参数" class="headerlink" title="作为方法定义参数"></a>作为方法定义参数</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)yourMethod:(return_type (^)(var_type))blockName;</div></pre></td></tr></table></figure>
<h3 id="作为方法传入参数"><a href="#作为方法传入参数" class="headerlink" title="作为方法传入参数"></a>作为方法传入参数</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[someObject doSomethingWithBlock: ^return_type (var_type varName)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Your code here...</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="匿名-Block"><a href="#匿名-Block" class="headerlink" title="匿名 Block"></a>匿名 Block</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">^return_type (var_type varName)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Your code here...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="使用-typedef"><a href="#使用-typedef" class="headerlink" title="使用 typedef"></a>使用 <code>typedef</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> return_type (^blockName)(var_type);</div></pre></td></tr></table></figure>
<h3 id="内联-Block"><a href="#内联-Block" class="headerlink" title="内联 Block"></a>内联 Block</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">^return_type (var_type varName)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Your code here...</span></div><div class="line">&#125;(var);</div></pre></td></tr></table></figure>
<h3 id="递归-Block"><a href="#递归-Block" class="headerlink" title="递归 Block"></a>递归 Block</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">__block return_type (^blockName)(var_type) = [^return_type (var_type varName)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (returnCondition)</div><div class="line">    &#123;</div><div class="line">        blockName = <span class="literal">nil</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Your code here...</span></div><div class="line">&#125; <span class="keyword">copy</span>];</div><div class="line">blockName(varValue);</div></pre></td></tr></table></figure>
<h3 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (return_type(^)(var_type))methodName</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Your code here...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在-swift-中"><a href="#在-swift-中" class="headerlink" title="在 swift 中"></a>在 swift 中</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">blockName = (varName: var_type) -&gt; (return_type)</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[swift 基本运算符]]></title>
      <url>https://coder-zjq.github.io/2016/08/19/Basic-Operator/</url>
      <content type="html"><![CDATA[<h4 id="如果赋值运算的右边是一个包含多个值的元组，则它的元素会被一次分成多个常量或变量："><a href="#如果赋值运算的右边是一个包含多个值的元组，则它的元素会被一次分成多个常量或变量：" class="headerlink" title="如果赋值运算的右边是一个包含多个值的元组，则它的元素会被一次分成多个常量或变量："></a>如果赋值运算的右边是一个包含多个值的元组，则它的元素会被一次分成多个常量或变量：</h4><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> (x, y) = (<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="comment">// x则等于1，y则等于2</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="不同于C及Objective-C中的赋值运算符，在Swift中的赋值运算符并不会返回值，因此以下表达式是错误的："><a href="#不同于C及Objective-C中的赋值运算符，在Swift中的赋值运算符并不会返回值，因此以下表达式是错误的：" class="headerlink" title="不同于C及Objective-C中的赋值运算符，在Swift中的赋值运算符并不会返回值，因此以下表达式是错误的："></a>不同于C及Objective-C中的赋值运算符，在Swift中的赋值运算符并不会返回值，因此以下表达式是错误的：</h4><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> x = y &#123;</div><div class="line">    <span class="comment">// 这是错误的，因为x = y并不会返回一个值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="浮点数求余运算：不同于C及Objective-C中的求余运算，Swift的求余运算还可以运算浮点数："><a href="#浮点数求余运算：不同于C及Objective-C中的求余运算，Swift的求余运算还可以运算浮点数：" class="headerlink" title="浮点数求余运算：不同于C及Objective-C中的求余运算，Swift的求余运算还可以运算浮点数："></a>浮点数求余运算：不同于C及Objective-C中的求余运算，Swift的求余运算还可以运算浮点数：</h4><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="number">8</span> % <span class="number">2.5</span>    <span class="comment">// 等于0.5</span></div><div class="line"><span class="comment">// 在这个例子中8除以2.5等于3，余0.5，因此求余运算符返回0.5的Double型。</span></div></pre></td></tr></table></figure>
<h4 id="元组也可比较运算，元组的比较运算从左至右，每次比较一个值，直到找到两个值不相等。如果所有元素都相等，则表示元组相等，例如："><a href="#元组也可比较运算，元组的比较运算从左至右，每次比较一个值，直到找到两个值不相等。如果所有元素都相等，则表示元组相等，例如：" class="headerlink" title="元组也可比较运算，元组的比较运算从左至右，每次比较一个值，直到找到两个值不相等。如果所有元素都相等，则表示元组相等，例如："></a>元组也可比较运算，元组的比较运算从左至右，每次比较一个值，直到找到两个值不相等。如果所有元素都相等，则表示元组相等，例如：</h4><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">(<span class="number">1</span>, <span class="string">"zebra"</span>) &lt; (<span class="number">2</span>, <span class="string">"apple"</span>)   <span class="comment">// true，因为1小于2</span></div><div class="line">(<span class="number">3</span>, <span class="string">"apple"</span>) &lt; (<span class="number">3</span>, <span class="string">"bird"</span>)    <span class="comment">// true，因为3等于3，但是"apple"小于"bird"</span></div><div class="line">(<span class="number">4</span>, <span class="string">"dog"</span>) == (<span class="number">4</span>, <span class="string">"dog"</span>)      <span class="comment">// true，因为4等于4，且"dog"等于"dog"</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>swift标准库中的元组比较运算只支持少于7个元素的元组比较，若是要比较7个或更多元素的元组则需要你自己重载比较运算符。</p>
<h4 id="空合并运算符-Nil-Coalescing-Operator"><a href="#空合并运算符-Nil-Coalescing-Operator" class="headerlink" title="空合并运算符(Nil Coalescing Operator)"></a>空合并运算符(Nil Coalescing Operator)</h4><p>空合并运算符(<code>a ?? b</code>)会对可选值<code>a</code>解包如果它有值的话，如果<code>a</code>是<code>nil</code>的话，则会返回一个默认的值<code>b</code>，表达式中的<code>a</code>一般为可选类型，而<code>b</code>必须与<code>a</code>的存储类型相匹配。</p>
<p>空合并运算符可速记为如下代码：<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">a != <span class="literal">nil</span> ? a! : b</div></pre></td></tr></table></figure></p>
<p>上述代码利用三目运算符，当<code>a</code>不为<code>nil</code>时将<code>a</code>强制解包(<code>a!</code>)读取<code>a</code>中的值，否则则返回默认值<code>b</code>。空合并运算符提供了一种更为优雅的方式来处理条件判断及解包操作，更加简洁，更具阅读性。<br><strong>注意：</strong><br>如果a的值非空，则b的值不会被估值，这就是所谓的短路求值。</p>
<p>下面的例子利用空合并运算符，在默认的颜色名以及可选的用户定义颜色名之间选择：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> defaultColorName = <span class="string">"red"</span></div><div class="line"><span class="keyword">var</span> userDefinedColorName: <span class="type">String</span>?   <span class="comment">// userDefinedColorName默认为nil</span></div><div class="line"><span class="keyword">var</span> colorNameToUse = userDefinedColorName ?? defaultColorName</div><div class="line"><span class="comment">// 因为userDefinedColorName为nil，因此colorNameToUse将会赋值为"red"</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LLDB — 让调试更有趣]]></title>
      <url>https://coder-zjq.github.io/2016/08/19/LLDB/</url>
      <content type="html"><![CDATA[<h3 id="什么是-LLDB？"><a href="#什么是-LLDB？" class="headerlink" title="什么是 LLDB？"></a>什么是 <a href="http://lldb.llvm.org" target="_blank" rel="external">LLDB</a>？</h3><ul>
<li>LLDB 是一个有着 REPL（交互式）的特性和 C++ ，Python 插件的开源调试器；</li>
<li>LLDB 是 Xcode 中默认的调试器，支持在桌面、iOS 设备以及 iOS 模拟器上调试以 C 语言、Objective-C 或者 C ++ 编写的程序；</li>
<li>LLDB 允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。</li>
</ul>
<a id="more"></a>
<hr>
<h3 id="LLDB-简单使用"><a href="#LLDB-简单使用" class="headerlink" title="LLDB 简单使用"></a>LLDB 简单使用</h3><p>在此之前你可能已经使用过 LLDB ，也许只是在 Xcode 的界面上加一些断点，查看一些变量的值。但是通过一些小的技巧，你就可以做一些非常酷的事情。</p>
<h4 id="help-—-指令帮助"><a href="#help-—-指令帮助" class="headerlink" title="help — 指令帮助"></a><em>help</em> — 指令帮助</h4><p><code>help</code> 是最简单的指令，输入 <code>help</code>便会为你列举所有的命令。同时，如果你忘记一条指令的作用或者想要知道更多，你便可以输入 <code>help &lt;command&gt;</code> 其中 <code>&lt;command&gt;</code> 为你想要了解的指令，例如： <code>help print</code>。</p>
<p><img src="http://ww1.sinaimg.cn/large/801b780agw1f6ypwim8rpj20ex0693zy.jpg" alt="help"></p>
<p><img src="http://ww4.sinaimg.cn/large/801b780agw1f6ypwwtyzbj20eo01lq3c.jpg" alt="help print"></p>
<h4 id="p-amp-po-—-打印变量或者对象"><a href="#p-amp-po-—-打印变量或者对象" class="headerlink" title="p &amp; po — 打印变量或者对象"></a><em>p</em> &amp; <em>po</em> — 打印变量或者对象</h4><p>因为 LLDB 支持前缀匹配，因此你可以将 <code>print</code> 简写为 <code>p</code> 或者 <code>pri</code> ，而 <code>print</code> 则代表 <code>expression --</code> ；<code>po</code> 则代表 <code>expression -O --</code> ，意为 print object ，打印对象。<br>输入 <code>p</code> 指令可打印其对象类型、内存地址以及该对象的值等具体信息，而 <code>po</code> 指令则是打印其调用 <code>description</code> 方法得到的值。</p>
<p><em>(注：打印集合类型对象时，<code>p</code>指令会省略具体的值，只提示集合的数量等信息，因此若需查看集合中的值应使用 <code>po</code>指令，如下图所示：)</em>   </p>
<h5 id="打印-NSString"><a href="#打印-NSString" class="headerlink" title="打印 NSString :"></a>打印 NSString :</h5><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f6ypyaz7pzj20b801i74i.jpg" alt="p &amp; po NSString"></p>
<h5 id="打印-NSDictionary"><a href="#打印-NSDictionary" class="headerlink" title="打印 NSDictionary :"></a>打印 NSDictionary :</h5><p><img src="http://ww2.sinaimg.cn/large/801b780agw1f6ypyjfpuzj20bk02oq37.jpg" alt="p &amp; po NSDictionary"></p>
<h5 id="打印-Person"><a href="#打印-Person" class="headerlink" title="打印 Person :"></a>打印 Person :</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - 自定义Person类</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="comment">/** 名字 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="comment">/** 年龄 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"><span class="comment">/** 重写description方法 */</span></div><div class="line">- (<span class="built_in">NSString</span> *)description&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"name:%@,age:%ld"</span>, <span class="keyword">self</span>.name, <span class="keyword">self</span>.age];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - main函数</span></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        Person *p = [[Person alloc] init];</div><div class="line">        p.name = <span class="string">@"Joker"</span>;</div><div class="line">        p.age = <span class="number">23</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ww2.sinaimg.cn/large/801b780agw1f6ypytojm9j207301kt8u.jpg" alt="p &amp; po Person"></p>
<h5 id="指定格式打印："><a href="#指定格式打印：" class="headerlink" title="指定格式打印："></a>指定格式打印：</h5><ul>
<li><p>以二进制打印</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(lldb) p/t 23</div><div class="line">(int) $0 = 0b00000000000000000000000000010111</div></pre></td></tr></table></figure>
</li>
<li><p>以八进制打印</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(lldb) p/o 23</div><div class="line">(int) $1 = 027</div></pre></td></tr></table></figure>
</li>
<li><p>以十六进制打印</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(lldb) p/x 23</div><div class="line">(int) $2 = 0x00000017</div></pre></td></tr></table></figure>
</li>
<li><p>以二进制打印，且只打印一个字节即八位(char类型只占据一个字节的内存)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(lldb) p/t (char)23</div><div class="line">(char) $3 = 0b00010111</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="expression-—-改变值"><a href="#expression-—-改变值" class="headerlink" title="expression — 改变值"></a><em>expression</em> — 改变值</h4><p>如果你想在调试的时候改变一个已有的值，那么你可以使用<code>expression</code>指令，也可以简写为<code>e</code></p>
<ul>
<li><p>在打印前添加断点：<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yr04sauoj209202qq35.jpg" alt="添加断点"></p>
</li>
<li><p>利用LLDB查看并修改已经定义的值：<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yqzvlh51j20cr030aal.jpg" alt="查看并修改"></p>
</li>
<li><p>继续运行查看打印结果<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yqzo0t8wj20bx00sjrk.jpg" alt="查看打印"></p>
</li>
</ul>
<p>可以看到之前定义的值通过LLDB已经成功被修改了。</p>
<hr>
<h3 id="LLDB更新UI"><a href="#LLDB更新UI" class="headerlink" title="LLDB更新UI"></a>LLDB更新UI</h3><p>既然LLDB可以修改已定义的值，那么LLDB能否在调试时修改UI中各类控件属性，以实现在不重新运行程序的情况下，更新UI查看效果？接下来进行验证：</p>
<ul>
<li><p>新建一个iOS项目，运行并断点，查看当前界面效果<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f6yqzfn33qj20c00ji3yw.jpg" alt="原始界面"></p>
</li>
<li><p>LLDB中改变控制器view背景<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f6yqz6tqduj20bg01idg5.jpg" alt="LLDB更新UI"></p>
</li>
<li><p>界面已经更新，变为绿色<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f6yqyvmxt6j20c00ji3yz.jpg" alt="改变界面"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Objective-C 中 self 与 super 的区别]]></title>
      <url>https://coder-zjq.github.io/2016/08/16/difference-between-self-and-super-in-Objective-C/</url>
      <content type="html"><![CDATA[<h3 id="以下代码的打印结果是什么？为什么？"><a href="#以下代码的打印结果是什么？为什么？" class="headerlink" title="以下代码的打印结果是什么？为什么？"></a>以下代码的打印结果是什么？为什么？</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQApple</span> : <span class="title">JQFruit</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">JQApple</span></span></div><div class="line">- (<span class="keyword">instancetype</span>)init&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]));</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">super</span> <span class="keyword">class</span>]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>按照面向对象的思想应该是分别打印<code>JQApple</code>和<code>JQFruit</code><br>然而运行结果却出乎我们的意料，最终均都打印“JQApple”。这是为什么？</p>
<p>因为<code>self</code>是类的隐藏参数，指向当前调用方法的对象。而<code>super</code>并不是如我们所想是指向当前对象父类的指针。其实<code>super</code>是一个编译器标识符，在运行时中与<code>self</code>相同，指向同一个消息接受者，只是<code>self</code>会优先在当前类的<code>methodLists</code>中查找方法，而<code>super</code>则是优先从父类中查找。验证如下：<br>在终端运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ clang -rewrite-objc main.m</div></pre></td></tr></table></figure></p>
<p>可以看到运行时代码如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>((<span class="built_in">NSString</span> *)&amp;__NSConstantStringImpl__var_folders_ld_03322m393b5cyvhz2zhv2c100000gn_T_main_97554f_mi_0, <span class="built_in">NSStringFromClass</span>(((Class (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *)objc_msgSend)((<span class="keyword">id</span>)<span class="keyword">self</span>, sel_registerName(<span class="string">"class"</span>))));</div><div class="line"><span class="built_in">NSLog</span>((<span class="built_in">NSString</span> *)&amp;__NSConstantStringImpl__var_folders_ld_03322m393b5cyvhz2zhv2c100000gn_T_main_97554f_mi_1, <span class="built_in">NSStringFromClass</span>(((Class (*)(__rw_objc_super *, SEL))(<span class="keyword">void</span> *)objc_msgSendSuper)((__rw_objc_super)&#123;(<span class="keyword">id</span>)<span class="keyword">self</span>, (<span class="keyword">id</span>)class_getSuperclass(objc_getClass(<span class="string">"JQApple"</span>))&#125;, sel_registerName(<span class="string">"class"</span>))));</div></pre></td></tr></table></figure></p>
<p>删除相关无关类型及方法后代码如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">objc_msgSend((<span class="keyword">id</span>)<span class="keyword">self</span>, sel_registerName(<span class="string">"class"</span>));</div><div class="line">objc_msgSendSuper((__rw_objc_super)&#123;(<span class="keyword">id</span>)<span class="keyword">self</span>, (<span class="keyword">id</span>)class_getSuperclass(objc_getClass(<span class="string">"JQApple"</span>))&#125;, sel_registerName(<span class="string">"class"</span>));</div></pre></td></tr></table></figure></p>
<p>查看函数定义：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * Sends a message with a simple return value to an instance of a class.</div><div class="line"> * </div><div class="line"> * @param self A pointer to the instance of the class that is to receive the message.</div><div class="line"> * @param op The selector of the method that handles the message.</div><div class="line"> * @param ... </div><div class="line"> *   A variable argument list containing the arguments to the method.</div><div class="line"> * </div><div class="line"> * @return The return value of the method.</div><div class="line"> * </div><div class="line"> * @note When it encounters a method call, the compiler generates a call to one of the</div><div class="line"> *  functions \c objc_msgSend, \c objc_msgSend_stret, \c objc_msgSendSuper, or \c objc_msgSendSuper_stret.</div><div class="line"> *  Messages sent to an object’s superclass (using the \c super keyword) are sent using \c objc_msgSendSuper; </div><div class="line"> *  other messages are sent using \c objc_msgSend. Methods that have data structures as return values</div><div class="line"> *  are sent using \c objc_msgSendSuper_stret and \c objc_msgSend_stret.</div><div class="line"> */</div><div class="line">OBJC_EXPORT <span class="keyword">id</span> objc_msgSend(<span class="keyword">id</span> <span class="keyword">self</span>, SEL op, ...)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);</div><div class="line"><span class="comment">/** </span></div><div class="line"> * Sends a message with a simple return value to the superclass of an instance of a class.</div><div class="line"> * </div><div class="line"> * @param super A pointer to an \c objc_super data structure. Pass values identifying the</div><div class="line"> *  context the message was sent to, including the instance of the class that is to receive the</div><div class="line"> *  message and the superclass at which to start searching for the method implementation.</div><div class="line"> * @param op A pointer of type SEL. Pass the selector of the method that will handle the message.</div><div class="line"> * @param ...</div><div class="line"> *   A variable argument list containing the arguments to the method.</div><div class="line"> * </div><div class="line"> * @return The return value of the method identified by \e op.</div><div class="line"> * </div><div class="line"> * @see objc_msgSend</div><div class="line"> */</div><div class="line">OBJC_EXPORT <span class="keyword">id</span> objc_msgSendSuper(<span class="keyword">struct</span> objc_super *<span class="keyword">super</span>, SEL op, ...)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);</div></pre></td></tr></table></figure></p>
<p>可知<code>objc_msgSend</code>函数中的<code>self</code>参数是指指向接收消息的类的实例的指针，即消息接受者，而<code>op</code>参数则是指处理该消息的<code>selector</code>；<code>objc_msgSendSuper</code>函数中的参数<code>super</code>则是一个<code>objc_super</code>结构体，<code>objc_super</code>结构体定义如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/// Specifies the superclass of an instance. </span></div><div class="line"><span class="keyword">struct</span> objc_super &#123;</div><div class="line">    <span class="comment">/// Specifies an instance of a class.</span></div><div class="line">    __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> receiver;</div><div class="line"></div><div class="line">    <span class="comment">/// Specifies the particular superclass of the instance to message. </span></div><div class="line">    __<span class="keyword">unsafe_unretained</span> Class super_class;</div><div class="line"></div><div class="line">    <span class="comment">/* super_class is the first class to search */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中<code>receiver</code>是指类的实例，<code>super_class</code>则是指该实例的父类。可以看到在编译后的<code>C++</code>代码中有个<code>__rw_objc_super</code>结构体：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> __rw_objc_super &#123; </div><div class="line">    <span class="keyword">struct</span> objc_object *object; </div><div class="line">    <span class="keyword">struct</span> objc_object *superClass; </div><div class="line">    __rw_objc_super(<span class="keyword">struct</span> objc_object *o, <span class="keyword">struct</span> objc_object *s) : object(o), superClass(s) &#123;&#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其实即为<code>objc_super</code>结构体。通过<code>(__rw_objc_super){(id)self, (id)class_getSuperclass(objc_getClass(&quot;JQApple&quot;))}</code>该段代码可知：我们把<code>self</code>以及<code>JQApple</code>的父类通过结构体的构造方法构造了一个<code>__rw_objc_super</code>结构体，也就是<code>objc_super</code>。因此<code>objc_super</code>结构体中的<code>receiver</code>既是<code>self</code>。所以<code>[self class]</code>和<code>[super class]</code>指向的是同一个消息接受者，只是<code>self</code>会优先从当前类的实现中寻找方法处理消息，而<code>super</code>则是会优先从<code>objc_super</code>结构体中的<code>super_class</code>也就是父类的实现中查找。<code>JQFruit</code>及<code>JQApple</code>中均未实现<code>- (Class)class;</code>方法，因此会逐级向上查找最终调用基类<code>NSObject</code>的<code>- (Class)class;</code>方法，通过官方开源的<code>NSObject</code>的<code>- (Class)class;</code>方法代码：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (Class)<span class="keyword">class</span>&#123;</div><div class="line">    <span class="keyword">return</span> object_getClass(<span class="keyword">self</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可知，消息接受者是<code>self</code>，而<code>[self class]</code>和<code>[super class]</code>指向的是同一个消息接受者，因此该段代码均打印<code>JQApple</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用指令记录]]></title>
      <url>https://coder-zjq.github.io/2016/08/16/git-code/</url>
      <content type="html"><![CDATA[<h2 id="配置与帮助"><a href="#配置与帮助" class="headerlink" title="配置与帮助"></a>配置与帮助</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 查看 Git 配置信息</span></div><div class="line">$ git config <span class="_">-l</span></div><div class="line"></div><div class="line"><span class="comment"># 修改 Git 配置文件</span></div><div class="line">$ git config <span class="_">-e</span></div><div class="line"></div><div class="line"><span class="comment"># 修改提交时的用户信息</span></div><div class="line">$ git config user.name <span class="string">"[name]"</span></div><div class="line">$ git config user.email <span class="string">"[email]"</span></div><div class="line"></div><div class="line"><span class="comment"># 查看所有指令</span></div><div class="line">$ git <span class="built_in">help</span></div><div class="line"></div><div class="line"><span class="comment"># 查看某条指令，例如 config</span></div><div class="line">$ git config --help</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="版本库创建"><a href="#版本库创建" class="headerlink" title="版本库创建"></a>版本库创建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 在当前文件夹初始化一个空的版本库，若已存在版本库则将其重新初始化</span></div><div class="line">$ git init</div><div class="line"></div><div class="line"><span class="comment"># 新建一个目录并初始化一个空的版本库</span></div><div class="line">$ git init [repo-name]</div><div class="line"></div><div class="line"><span class="comment"># 通过 ssh 从远程仓库克隆</span></div><div class="line">$ git <span class="built_in">clone</span> git@github.com:Coder-ZJQ/Test-Git.git</div><div class="line"></div><div class="line"><span class="comment"># 通过 https 从远程仓库克隆</span></div><div class="line">$ git <span class="built_in">clone</span> https://github.com/Coder-ZJQ/Test-Git.git</div></pre></td></tr></table></figure>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 新建一个文件</span></div><div class="line">$ touch [file-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个文件夹</span></div><div class="line">$ mkdir [dir-name]</div><div class="line"></div><div class="line"><span class="comment"># 查看一个文件</span></div><div class="line">$ cat [file-name]</div><div class="line"></div><div class="line"><span class="comment"># 编辑一个文件，编辑完成输入 ":wq" 保存退出</span></div><div class="line">$ vi [file-name]</div><div class="line"></div><div class="line"><span class="comment"># 将工作区中已修改的文件，添加到暂存区（可多个文件）</span></div><div class="line">$ git add [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 将文件夹下已修改的文件添加到暂存区（可多个文件夹）</span></div><div class="line">$ git add [dir1] [dir2] ...</div><div class="line"></div><div class="line"><span class="comment"># 将当前目录下的所有已修改文件添加至暂存区</span></div><div class="line">$ git add ./</div><div class="line"></div><div class="line"><span class="comment"># 删除工作区的文件，并将此次操作放入暂存区</span></div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 删除文件夹下的所有文件，并将此次操作放入暂存区（并不会删除文件夹）</span></div><div class="line">$ git rm -r [dir]</div><div class="line"></div><div class="line"><span class="comment"># 为文件改名，并将此次操作放入暂存区</span></div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h2 id="修改管理"><a href="#修改管理" class="headerlink" title="修改管理"></a>修改管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 查看当前状态</span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment"># 将暂存区的修改提交至当前分支</span></div><div class="line">$ git commit -m <span class="string">"[message]"</span></div><div class="line"></div><div class="line"><span class="comment"># 将暂存区中的指定文件或文件夹添加到当前分支</span></div><div class="line">$ git commit [file] | [dir] ... -m <span class="string">"[message]"</span></div><div class="line"></div><div class="line"><span class="comment"># 将修改或删除的文件直接提交至当前分支，跳过 add 步骤（新建文件还需先 add ）</span></div><div class="line">$ git commit <span class="_">-a</span> -m <span class="string">"[message]"</span></div><div class="line"></div><div class="line"><span class="comment"># 提交一次新的 commit，重写 message</span></div><div class="line">$ git commit --amend -m <span class="string">"[message]"</span></div><div class="line"></div><div class="line"><span class="comment"># 恢复修改至最近的一次 commit 或者 add，即放弃工作区中的修改</span></div><div class="line">$ git checkout [file] | [dir] ...</div><div class="line"></div><div class="line"><span class="comment"># 若是已经将工作区的修改 add 至暂存区，可以先 reset 然后再 checkout</span></div><div class="line">$ git reset HEAD [file] | [dir] ...</div><div class="line"></div><div class="line"><span class="comment"># 若是已经 add 并且 commit，可以版本回退，撤销修改</span></div><div class="line">$ git reset --hard [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 保存当前工作区至工作栈</span></div><div class="line">$ git stash</div><div class="line"></div><div class="line"><span class="comment"># 恢复工作栈栈顶的工作区，但并不会删除</span></div><div class="line">$ git stash apply</div><div class="line"></div><div class="line"><span class="comment"># 删除工作栈栈顶的工作区</span></div><div class="line">$ git stash drop</div><div class="line"></div><div class="line"><span class="comment"># 将工作栈栈顶的工作区出栈：恢复工作区并删除</span></div><div class="line">$ git stash pop</div><div class="line"></div><div class="line"><span class="comment"># 查看工作栈中保存的工作区</span></div><div class="line">$ git stash list</div></pre></td></tr></table></figure>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 查看本地分支</span></div><div class="line">$ git branch</div><div class="line"></div><div class="line"><span class="comment"># 查看远程分支</span></div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"><span class="comment"># 查看所有分支</span></div><div class="line">$ git branch <span class="_">-a</span></div><div class="line"></div><div class="line"><span class="comment"># 创建一个新的分支</span></div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 在指定 commit 创建一个分支</span></div><div class="line">$ git branch [branch-name] [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 在指定 tag 创建一个分支</span></div><div class="line">$ git branch [branch-name] [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，并追踪一个远程分支</span></div><div class="line">$ git branch --track [branch-name] [remote-branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 在现有分支与指定的远程分支之间建立追踪关系</span></div><div class="line">$ git branch --set-upstream [branch-name] [remote-branch-name]</div><div class="line">$ git branch <span class="_">-f</span> --track <span class="built_in">test</span> [branch-name] [remote-branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 切换分支</span></div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 切换到上一个分支</span></div><div class="line">$ git checkout -</div><div class="line"></div><div class="line"><span class="comment"># 创建一个新的分支，并跳转至该分支</span></div><div class="line">$ git checkout -b [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 合并某分支至当前分支，默认是 Fast-forward 模式</span></div><div class="line">$ git merge [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></div><div class="line">$ git cherry-pick [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除分支</span></div><div class="line">$ git branch <span class="_">-d</span> [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程分支</span></div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote-branch]</div></pre></td></tr></table></figure>
<h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 创建 SSH Key</span></div><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div><div class="line"></div><div class="line"><span class="comment"># 本地关联远程版本库，并设置简称</span></div><div class="line">$ git remote add [remote-name] [remote-SSG | remote-URL]</div><div class="line"></div><div class="line"><span class="comment"># 将远程版本库代码更新至本地，但并不会执行合并操作</span></div><div class="line">$ git fetch [remote-name]</div><div class="line"></div><div class="line"><span class="comment"># 从远程版本库获取代码，并与本地分支合并</span></div><div class="line">$ git pull [remote-name] [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></div><div class="line">$ git push [remote-name] [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></div><div class="line">$ git push [remote-name] --force</div><div class="line"></div><div class="line"><span class="comment"># 推送所有分支到远程仓库</span></div><div class="line">$ git push [remote-name] --all</div><div class="line"></div><div class="line"><span class="comment"># 显示所有远程版本库</span></div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"><span class="comment"># 显示某个远程版本库信息</span></div><div class="line">$ git remote show [remote-name]</div></pre></td></tr></table></figure>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 列出所有 tag </span></div><div class="line">$ git tag</div><div class="line"></div><div class="line"><span class="comment"># 查看 tag 信息</span></div><div class="line">$ git show [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 在当前 commit 新建一个 tag</span></div><div class="line">$ git tag [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 在指定 commit 上新建一个 tag</span></div><div class="line">$ git tag [tag-name] [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 创建一个 tag 并指定标签信息</span></div><div class="line">$ git tag <span class="_">-a</span> [tag-name] -m <span class="string">"[message]"</span> [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 删除标签</span></div><div class="line">$ git tag <span class="_">-d</span> [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 推送本地标签至远程版本库</span></div><div class="line">$ git push [remote-name] [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 推送所有尚未推送的本地标签至远程版本库</span></div><div class="line">$ git push [remote-name] --tags</div><div class="line"></div><div class="line"><span class="comment"># 删除远程版本库中的标签，先删除本地，再推送删除远程</span></div><div class="line">$ git tag <span class="_">-d</span> [tag-name]</div><div class="line">$ git push [remote-name] :refs/tags/[tag-name]</div></pre></td></tr></table></figure>
<h2 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 显示有变更的文件</span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的版本历史</span></div><div class="line">$ git <span class="built_in">log</span></div><div class="line"></div><div class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></div><div class="line">$ git <span class="built_in">log</span> --stat</div><div class="line"></div><div class="line"><span class="comment"># 搜索提交历史，根据关键词</span></div><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</div><div class="line"></div><div class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></div><div class="line">$ git <span class="built_in">log</span> --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></div><div class="line">$ git <span class="built_in">log</span> -p [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示过去5次提交</span></div><div class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</div><div class="line"></div><div class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></div><div class="line">$ git shortlog -sn</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></div><div class="line">$ git blame [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和工作区的差异</span></div><div class="line">$ git diff</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"><span class="comment"># 显示两次提交之间的差异</span></div><div class="line">$ git diff [first-branch]...[second-branch]</div><div class="line"></div><div class="line"><span class="comment"># 显示今天你写了多少行代码</span></div><div class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交发生变化的文件</span></div><div class="line">$ git show --name-only [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的最近几次提交</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 生成一个可供发布的压缩包</span></div><div class="line">$ git archive</div></pre></td></tr></table></figure>
<hr>
<p> 参考资料：<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的官方网站 - Git 教程</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?utm_source=tool.lu" target="_blank" rel="external">阮一峰 - 常用 Git 清单</a><br><a href="https://git-scm.com/docs" target="_blank" rel="external">git-scm</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[＠property 、 ＠synthesize 与 ＠dynamic 的作用]]></title>
      <url>https://coder-zjq.github.io/2016/08/09/@property_@synthesize_@dynamic/</url>
      <content type="html"><![CDATA[<ul>
<li><strong>@property</strong>: 用于声明成员变量的 getter/setter 方法</li>
<li><strong>@synthesize</strong>: 与 @property 配套使用，@synthesize 会自动生成一个<code>_</code>开头的成员变量（若是不指定的话），并实现 @property 声明的 getter/setter 方法。</li>
<li><strong>@dynamic</strong>: 不会自动生成成员变量，程序员需自己添加成员变量并实现 getter/setter 方法。    </li>
</ul>
<a id="more"></a>
<p><strong> 具体细节详见以下代码：</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQPerson</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//  3.1 由于 @dynamic 并不会自动生成成员变量，因此需自主添加成员变量用于 getter/setter 方法，否则会报 “Use undeclared identifier” 错误。</span></div><div class="line">    <span class="built_in">NSInteger</span> _weight;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//  1. @property 的简单使用</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> height;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> weight;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">JQPerson</span></span></div><div class="line"></div><div class="line"><span class="comment">//  2. @synthesize 的使用</span></div><div class="line"><span class="comment">//  2.1 默认生成"_"开头的成员变量， 即：</span></div><div class="line"><span class="keyword">@synthesize</span> name = _name;</div><div class="line"><span class="comment">//  2.2 生成与 @property 相同的不带下划线的成员变量：</span></div><div class="line"><span class="keyword">@synthesize</span> age;</div><div class="line"><span class="comment">//  2.3 指定生成的成员变量名：</span></div><div class="line"><span class="keyword">@synthesize</span> height = H;</div><div class="line"></div><div class="line"><span class="comment">//  3. @dynamic 的使用</span></div><div class="line"><span class="keyword">@dynamic</span> weight;</div><div class="line"><span class="comment">//  3.2 实现 getter/setter 方法（这里只是简单的实现）：</span></div><div class="line">- (<span class="keyword">void</span>)setWeight:(<span class="built_in">NSInteger</span>)weight &#123;</div><div class="line">    _weight = weight;</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">NSInteger</span>)weight &#123;</div><div class="line">    <span class="keyword">return</span> _weight;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong><em>（Tips：在都没有使用 @synthesize 以及 @dynamic 时，默认为 <code>@synthesize propertyName = _propertyName;</code>。但若是同时实现了 getter&amp;setter 方法，则隐含表示为 <code>@dynamic propertyName;</code> 因此编译器并不会自动生成成员变量，此时若是使用成员变量则会出现 “Use undeclared identifier” 错误。解决方法可以在类的声明中自主添加私有的成员变量，或者使用 @synthesize，告知编译器自动生成成员变量。）</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Alcatraz 的安装与使用]]></title>
      <url>https://coder-zjq.github.io/2016/04/22/Alcatraz/</url>
      <content type="html"><![CDATA[<h3 id="什么是-Alcatraz-？"><a href="#什么是-Alcatraz-？" class="headerlink" title="什么是 Alcatraz ？"></a>什么是 Alcatraz ？</h3><blockquote>
<p>Alcatraz is an open-source package manager for Xcode 7+. It lets you discover and install plugins, templates and color schemes without the need for manually cloning or copying files. It installs itself as a part of Xcode and it feels like home.<br><a href="https://github.com/alcatraz/Alcatraz" target="_blank" rel="external">Alcatraz</a> 是一款在 Xcode 7+ 以上用于管理开源包的工具。它可以帮你查找或安装 Xcode 插件、模板、颜色主题，不需要认为的克隆或拷贝文件，它就像是 Xcode 的一部分。</p>
</blockquote>
<a id="more"></a>
<p><strong>（注：Alcatraz 要求 Xcode 版本号为 7 以上）</strong></p>
<h3 id="Alcatraz-的安装"><a href="#Alcatraz-的安装" class="headerlink" title="Alcatraz 的安装"></a>Alcatraz 的安装</h3><ul>
<li><p>打开终端，在终端中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ curl -fsSL https://raw.github.com/alcatraz/Alcatraz/master/Scripts/install.sh | sh</div></pre></td></tr></table></figure>
</li>
<li><p>安装成功后显示如下，并重启 Xcode<br><img src="http://ww3.sinaimg.cn/large/006tNc79gw1f784eek7d0j30iy0dajue.jpg" alt="安装"></p>
</li>
<li>重启Xcode会提示你是否加载 Bundle，选择 <strong><em>Load Bundle</em></strong></li>
<li>按 <code>shift + command + 9</code> 或者 <code>Windows --&gt; Package Manager</code> ，便可打开 Alcatraz 的图形界面</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f784ewdyxmj30i90hvq4y.jpg" alt="图形界面"></p>
<h3 id="Alcatraz-的卸载"><a href="#Alcatraz-的卸载" class="headerlink" title="Alcatraz 的卸载"></a>Alcatraz 的卸载</h3><ul>
<li>打开终端，在终端中输入：<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Alcatraz-的使用"><a href="#Alcatraz-的使用" class="headerlink" title="Alcatraz 的使用"></a>Alcatraz 的使用</h3><ul>
<li>输入想要使用的插件，以 <code>KSImagedNamed</code> 为例，点击 <strong>INSTALL</strong> 便可安装<br><img src="http://ww4.sinaimg.cn/large/006tNc79gw1f784f87k07j30i90j3dh7.jpg" alt="install"></li>
<li>在项目中输入 <code>[UIImage imageNamed:]</code> 验证：<br><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f784fo10mej30cj04kwfe.jpg" alt="KSImagedNamed"></li>
<li>Alcatraz 安装的插件都会下载到 <code>~/Library/Application Support/Alcatraz/Plug-ins</code> 文件夹下<br><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f784g01elmj305k0313yn.jpg" alt="插件"></li>
<li>因此若要删除不使用的插件，可直接在该文件夹下删除，或者在图形界面点击 <strong>REMOVE</strong> ，删除所有插件：<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ rm -rf ~/Library/Application\ Support/Alcatraz/</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CocoaPods 的安装与使用]]></title>
      <url>https://coder-zjq.github.io/2016/04/22/cocoapods/</url>
      <content type="html"><![CDATA[<h3 id="什么是-CocoaPods？"><a href="#什么是-CocoaPods？" class="headerlink" title="什么是 CocoaPods？"></a>什么是 CocoaPods？</h3><blockquote>
<p>CocoaPods 可以为你管理 Xcode 项目中使用的依赖库，且只需要编辑一个简单的文本文件—— Podfile 。CocoaPods 会解析这些库之间的依赖，获取源代码，并将它们放入一个 Xcode 工作空间，以可以被用来构造你的项目。</p>
</blockquote>
<a id="more"></a>
<h3 id="CocoaPods-的安装"><a href="#CocoaPods-的安装" class="headerlink" title="CocoaPods 的安装"></a>CocoaPods 的安装</h3><blockquote>
<p>CocoaPods 是以 Ruby 构建的，幸运的是 Mac OS X 自带默认的 Ruby 环境，因此安装很简单，不过需先更换下 Ruby 的默认源（被墙）。    </p>
</blockquote>
<p><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yph89faqj20b203y3z7.jpg" alt="Ruby源.png"></p>
<ul>
<li><p>移除 Ruby 默认源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gem sources --remove https://rubygems.org/</div></pre></td></tr></table></figure>
</li>
<li><p>添加国内淘宝提供的 Ruby 源（注：已经换成 https 协议的）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gem sources <span class="_">-a</span> https://ruby.taobao.org/</div></pre></td></tr></table></figure>
</li>
<li><p>查看是否替换成功，并且确定只有 <code>https://ruby.taobao.org/</code> 这一个源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gem sources <span class="_">-l</span>:</div></pre></td></tr></table></figure>
</li>
<li><p>若显示如下则表示替换成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">*** CURRENT SOURCES *** </div><div class="line"></div><div class="line">https://ruby.taobao.org/</div></pre></td></tr></table></figure>
</li>
<li><p>安装 CocoaPods 至:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ sudo gem install cocoapods(OS X 10.11之前)</div><div class="line">$ sudo gem install -n /usr/<span class="built_in">local</span>/bin cocoapods (OS X 10.11之后)</div></pre></td></tr></table></figure>
</li>
<li><p>输入密码，安装成功后接着执行，设置 CocoaPods 的环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ pod setup</div></pre></td></tr></table></figure>
</li>
<li><p>之后便会在 <code>/usr/local/bin</code> 或 <code>/usr/bin</code> 文件夹下看到这些可执行文件：<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yphqwe4jj204p02omxa.jpg" alt="pod"></p>
</li>
<li>可以查看下 CocoaPods 版本验证是否安装成功<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ pod --version</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="终端使用CocoaPods"><a href="#终端使用CocoaPods" class="headerlink" title="终端使用CocoaPods"></a>终端使用CocoaPods</h3><ul>
<li>新建一个 Xcode 项目</li>
<li><p>cd 到项目根目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /Users/Joker/Desktop/TestPods/</div></pre></td></tr></table></figure>
</li>
<li><p>创建 Podfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ touch Podfile</div></pre></td></tr></table></figure>
</li>
<li><p>使用 vim 编辑 Podfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ vim Podfile</div></pre></td></tr></table></figure>
</li>
<li><p>输入如下内容，并 <code>:wq</code> 保存退出   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 表示使用平台是iOS</span></div><div class="line">platform:ios</div><div class="line"><span class="comment"># 导入AFNetworking，没有标明版本的话，默认是导入最新版</span></div><div class="line">pod <span class="string">'AFNetworking'</span></div></pre></td></tr></table></figure>
</li>
<li><p>开始安装需导入的依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ pod install</div></pre></td></tr></table></figure>
</li>
<li><p>导入成功的话会提示你以后使用 <code>XXXX.xcworkspace</code> 文件打开项目    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[!] Please close any current Xcode sessions and use </div><div class="line">TestPods.xcworkspace for this project from now on.</div></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f6ypie1flhj20fr07ut9x.jpg" alt="安装成功"></p>
</li>
<li>且项目根目录下会自动生成一些文件<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f6ypio6z7kj20520450sy.jpg" alt="项目根目录"></li>
<li>打开项目，此时项目下有两个工作空间，新增的则为 CocoaPods 用以管理依赖库的工作空间，可在该工作空间的 Pods 文件夹下看到导入的依赖库<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6ypiwmb2ij205404g74g.jpg" alt="项目文件结构"></li>
</ul>
<h3 id="利用-CocoaPods-插件"><a href="#利用-CocoaPods-插件" class="headerlink" title="利用 CocoaPods 插件"></a>利用 CocoaPods 插件</h3><p><strong><em>除了利用终端使用 CocoaPods 之外，还可以为 Xcode 安装 CocoaPods 插件，使 pod 更加简单。</em></strong></p>
<ul>
<li>下载 <a href="https://github.com/kattrali/cocoapods-xcode-plugin" target="_blank" rel="external">kattrali/cocoapods-xcode-plugin</a></li>
<li>打开 <code>CocoaPods.xcworkspace</code> 运行，便可在 <code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code> 文件夹下看到 CocoaPods 插件<br><img src="http://ww2.sinaimg.cn/large/801b780agw1f6ypj8v2tlj2056069mx9.jpg" alt="cocoapods-xcode-plugin"></li>
<li><p>从 Xcode 5 开始，苹果要求加入 UUID 证书从而保证插件的稳定性。因此Xcode版本更新之后需要在 <code>cocoapods-xcode-plugin</code> 的 <code>Info.plist</code> 文件中添加 Xcode 的 UUID 。终端下输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ defaults <span class="built_in">read</span> /Applications/Xcode.app/Contents/Info </div><div class="line">DVTPlugInCompatibilityUUID</div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code> 文件夹下找到 CocoaPods 插件，显示包内容，并在 info.plist 中的 <code>DVTPlugInCompatibilityUUIDs</code> 项新增刚才获取的 UUID ：<br><img src="http://ww2.sinaimg.cn/large/801b780agw1f6ypjiusrvj208g08x3z7.jpg" alt="info.plist"></p>
</li>
<li>添加成功后重启Xcode便会提示，选择 <strong><em>Load Bundle</em></strong><br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6ypjsp0d7j20es08bgmd.jpg" alt="Load Bundle"></li>
<li>此时打开Xcode项目便可在 Product 下看到：<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f6ypk4x81kj20cb092ab6.jpg" alt="CocoaPods"></li>
<li>记得修改 GEM_PATH 为 CocoaPods 的安装目录，如：/usr/local/bin</li>
<li>之后使用 CocoaPods pod依赖库便是可视化的<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Create/Edit Podfile:创建或编辑Podfile</div><div class="line">Install Pods:安装</div><div class="line">Update Pods:更新</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h3><ol>
<li><p>pod 常用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod install: 安装依赖库，并将版本信息写入 Podfile.lock 文件；</div><div class="line">pod plugins:查看可用的 CocoaPods 插件；</div><div class="line">pod list:查看远程 pods 库中所有的依赖库；</div><div class="line">pod search:查找需导入的依赖库是否在 pods 库中；</div><div class="line">pod setup:设置 CocoaPods 的环境；</div><div class="line">pod update:更新过期的依赖库，并且创建新的 Podfile.lock 文件；</div><div class="line">pod --version: 查看工具版本号；</div><div class="line">pod --help:显示帮助信息。</div></pre></td></tr></table></figure>
</li>
<li><p>pod 控制依赖库版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//不显式指定依赖库版本，表示每次都获取最新版本</div><div class="line">pod ‘AFNetworking’</div><div class="line">//只使用2.0版本</div><div class="line">pod ‘AFNetworking’,  ‘2.0’</div><div class="line">//使用高于2.0的版本</div><div class="line">pod ‘AFNetworking’, ‘&gt;2.0′</div><div class="line">//使用大于或等于2.0的版本</div><div class="line">pod ‘AFNetworking’, ‘&gt;=2.0′</div><div class="line">//使用小于2.0的版本</div><div class="line">pod ‘AFNetworking’, ‘&lt;2.0′</div><div class="line">//使用小于或等于2.0的版本</div><div class="line">pod ‘AFNetworking’, ‘&lt;=2.0′</div><div class="line">//使用大于等于0.1.2但小于0.2的版本，相当于&gt;=0.1.2并且&lt;0.2.0</div><div class="line">pod ‘AFNetworking’, ‘~&gt;0.1.2′</div><div class="line">//使用大于等于0.1但小于1.0的版本</div><div class="line">pod ‘AFNetworking’, ‘~&gt;0.1′ </div><div class="line">//高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本 </div><div class="line">pod ‘AFNetworking’, ‘~&gt;0′</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何抽取其它应用素材 - iOS]]></title>
      <url>https://coder-zjq.github.io/2016/04/17/extract-images/</url>
      <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="下载-ipa-："><a href="#下载-ipa-：" class="headerlink" title="下载 ipa ："></a>下载 ipa ：</h4><blockquote>
<p>iTunes –&gt; App Store –&gt; 下载所需素材的应用。下载完成后，可在我的 iPhone 应用 –&gt; 在 Finder 中显示，看到下载的 ipa 文件。   </p>
</blockquote>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f6yowx86sxj204d06ct8s.jpg" alt="ipa文件.png"></p>
<a id="more"></a>
<h4 id="生成-cartool-可执行文件"><a href="#生成-cartool-可执行文件" class="headerlink" title="生成 cartool 可执行文件"></a>生成 cartool 可执行文件</h4><blockquote>
<p>在 github 上下载 <a href="https://github.com/steventroughtonsmith/cartool" target="_blank" rel="external">cartool</a> ，用 Xcode 打开并执行，便可在项目的 Products 文件夹下找到生成 cartool 可执行文件。</p>
</blockquote>
<p><code>（TIPS：若是需将 cartoon 移动至其他文件夹，不要直接在工程目录下直接拖动，这样只是生成个替身。正确的方式应 show in finder 在 finder 中操作。）</code><br><img src="http://ww3.sinaimg.cn/large/801b780agw1f6yoyp3r0kj205f050weo.jpg" alt="cartool.png">  </p>
<hr>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><h4 id="右击下载的-ipa-文件-–-gt-打开方式-–-gt-选择归档实用工具；"><a href="#右击下载的-ipa-文件-–-gt-打开方式-–-gt-选择归档实用工具；" class="headerlink" title="右击下载的 ipa 文件 –&gt; 打开方式 –&gt; 选择归档实用工具；"></a>右击下载的 ipa 文件 –&gt; 打开方式 –&gt; 选择归档实用工具；</h4><p><img src="http://ww1.sinaimg.cn/large/801b780agw1f6yozw2lrqj205s03k3yo.jpg" alt="归档实用工具.png"></p>
<h4 id="可解档出一文件夹-–-gt-Payload-–-gt-显示包内容；"><a href="#可解档出一文件夹-–-gt-Payload-–-gt-显示包内容；" class="headerlink" title="可解档出一文件夹 –&gt; Payload –&gt; 显示包内容；"></a>可解档出一文件夹 –&gt; Payload –&gt; 显示包内容；</h4><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f6yp0d753tj20cn02a74j.jpg" alt="显示包内容.png"></p>
<h4 id="在该包内便有部分所需的素材；"><a href="#在该包内便有部分所需的素材；" class="headerlink" title="在该包内便有部分所需的素材；"></a>在该包内便有部分所需的素材；</h4><p><img src="http://ww2.sinaimg.cn/large/801b780agw1f6yp18adylj205e06pdgl.jpg" alt="包内容.png"></p>
<h4 id="但还有部分素材保存在-Assets-car-文件中，此时就可以用到刚才生成的-cartool-，抽取其中的素材；"><a href="#但还有部分素材保存在-Assets-car-文件中，此时就可以用到刚才生成的-cartool-，抽取其中的素材；" class="headerlink" title="但还有部分素材保存在 Assets.car 文件中，此时就可以用到刚才生成的 cartool ，抽取其中的素材；"></a>但还有部分素材保存在 Assets.car 文件中，此时就可以用到刚才生成的 cartool ，抽取其中的素材；</h4><p><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yp1sftbbj2048064zka.jpg" alt="Assets_car.png"></p>
<h4 id="打开终端-cd-到-cartool-所在的文件夹下，执行命令-cartool-Assets-car所在文件夹-存放素材的文件夹-，便可获得-Assets-car-中的素材。"><a href="#打开终端-cd-到-cartool-所在的文件夹下，执行命令-cartool-Assets-car所在文件夹-存放素材的文件夹-，便可获得-Assets-car-中的素材。" class="headerlink" title="打开终端 cd 到 cartool 所在的文件夹下，执行命令 ./cartool [Assets.car所在文件夹] [存放素材的文件夹] ，便可获得 Assets.car 中的素材。"></a>打开终端 cd 到 cartool 所在的文件夹下，执行命令 <code>./cartool [Assets.car所在文件夹] [存放素材的文件夹]</code> ，便可获得 Assets.car 中的素材。</h4><p><img src="http://ww2.sinaimg.cn/large/801b780agw1f6yp2dca7xj20bl01mmxf.jpg" alt="cd_cartool.jpg"> </p>
<p><img src="http://ww2.sinaimg.cn/large/801b780agw1f6yp2u7i8jj205g07jmy1.jpg" alt="素材.png"></p>
<h4 id="获取的素材一般会带有-“-iphone”-或者-“-ipad”-，使用时需替换掉，因此需批量更改素材名，可用-Xcode-编写代码"><a href="#获取的素材一般会带有-“-iphone”-或者-“-ipad”-，使用时需替换掉，因此需批量更改素材名，可用-Xcode-编写代码" class="headerlink" title="获取的素材一般会带有 “~iphone” 或者 “~ipad” ，使用时需替换掉，因此需批量更改素材名，可用 Xcode 编写代码"></a>获取的素材一般会带有 “~iphone” 或者 “~ipad” ，使用时需替换掉，因此需批量更改素材名，可用 Xcode 编写代码</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//  素材文件夹路径（输入自己的）</span></div><div class="line">        <span class="built_in">NSString</span> *filePath = <span class="string">@"/Users/Joker/....../Images"</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//  获取文件管理者</span></div><div class="line">        <span class="built_in">NSFileManager</span> *manager = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line">        </div><div class="line">        <span class="comment">//  获取该文件夹下所有文件名</span></div><div class="line">        <span class="built_in">NSArray</span> *fileNames = [manager contentsOfDirectoryAtPath:filePath error:<span class="literal">nil</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//  遍历文件名</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> *fileName <span class="keyword">in</span> fileNames) &#123;</div><div class="line">            </div><div class="line">            <span class="comment">//  为修改前的文件路径</span></div><div class="line">            <span class="built_in">NSString</span> *fromPath = [filePath stringByAppendingPathComponent:fileName];</div><div class="line">            </div><div class="line">            <span class="comment">//  将“~iphone”替换为“”，最好用正则表达式，此处仅简单替换</span></div><div class="line">            <span class="built_in">NSString</span> *changeToName = [fileName stringByReplacingOccurrencesOfString:<span class="string">@"~iphone"</span> withString:<span class="string">@""</span>];</div><div class="line">            </div><div class="line">            <span class="comment">//  拼接该玩的文件名至路径</span></div><div class="line">            <span class="built_in">NSString</span> *toPath = [filePath stringByAppendingPathComponent:changeToName];</div><div class="line">            </div><div class="line">            <span class="comment">//  将素材移动至修改完的路径</span></div><div class="line">            [manager moveItemAtPath:fromPath toPath:toPath error:<span class="literal">nil</span>];</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="利用插件"><a href="#利用插件" class="headerlink" title="利用插件"></a>利用插件</h3><p>有个大神写了个插件 <code>iOS Images Extractor</code> ，就是下面这个：<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yp3j4sjaj203s03djrg.jpg" alt="iOS Images Extractor.png"></p>
<p>不过好像删除了，如果有需要的话下面是分享的下载地址。使用的话直接将 ipa 文件拖进去就可以。   </p>
<p><img src="http://ww1.sinaimg.cn/large/801b780agw1f6yp3x2y04j20go0cat9b.jpg" alt="插件界面"></p>
<p><a href="https://github.com/duiyueliu/iOS-Images-Extractor-master" target="_blank" rel="external">项目地址</a><br><a href="https://pan.baidu.com/s/1dFNrF4P" target="_blank" rel="external">插件地址</a></p>
<p><em>（注意，抽取的素材仅供学习，不要用于其他商业用途）</em></p>
]]></content>
    </entry>
    
  
  
</search>
