{"meta":{"title":"ZJQ's Blog","subtitle":null,"description":"Always Be Coding...","author":"ZJQ","url":"https://coder-zjq.github.io"},"pages":[{"title":"分类","date":"2016-08-18T12:29:48.000Z","updated":"2016-08-18T12:30:49.000Z","comments":false,"path":"categories/index.html","permalink":"https://coder-zjq.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2016-08-18T12:27:05.000Z","updated":"2016-08-18T12:28:44.000Z","comments":false,"path":"tags/index.html","permalink":"https://coder-zjq.github.io/tags/index.html","excerpt":"","text":""},{"title":"2016_Summary","date":"2017-02-18T08:32:26.000Z","updated":"2017-02-18T09:25:08.000Z","comments":true,"path":"other/2016-Summary.html","permalink":"https://coder-zjq.github.io/other/2016-Summary.html","excerpt":"","text":"Work Time Line2015 07.19 自学 iOS2015 10.26 第一份工作(Android)2016 03.06 辞职03.09 MacBook Air 2016 08.27 第二份工作2017 01.22 提交辞职Future…Keep Moving… Keep Studying…"},{"title":"环闽游记","date":"2017-02-18T09:25:53.000Z","updated":"2017-02-18T10:21:46.000Z","comments":true,"path":"other/环闽游记.html","permalink":"https://coder-zjq.github.io/other/环闽游记.html","excerpt":"","text":"环闽游记Day 1：泉州师范学院-角美站 (110km) Day 2：角美站-闽南师范大学-龙岩适中 (130km)Day 3：龙岩适中-培斜村-古田会议遗址-连城朋口 (147km)Day 4：连城朋口-宁化中沙 (120km)Day 5：宁化中沙-建宁-泰宁朱口 (110km)Day 6：泰宁朱口-邵武-武夷山 (160km)Day 7：武夷山-福州白湖亭 (47km)Day 8：福州白湖亭-莆田-泉州师范学院 (190km)"},{"title":"集成中国银联手机支付控件（Apple Pay 版本）","date":"2016-12-09T05:53:43.000Z","updated":"2016-12-09T05:59:49.000Z","comments":true,"path":"other/unionpay.html","permalink":"https://coder-zjq.github.io/other/unionpay.html","excerpt":"","text":"支付流程是否展示 Apple Pay 选项商户 APP 在调用 Apple Pay 之前 支付控件调用iOS 客户端接入说明###"},{"title":"pop","date":"2016-09-10T02:56:55.000Z","updated":"2016-11-22T14:56:06.000Z","comments":true,"path":"other/POP.html","permalink":"https://coder-zjq.github.io/other/POP.html","excerpt":"","text":""}],"posts":[{"title":"Xcode-Tips","slug":"Xcode-Tips","date":"2016-12-21T03:05:47.000Z","updated":"2016-12-21T03:12:59.000Z","comments":true,"path":"2016/12/21/Xcode-Tips/","link":"","permalink":"https://coder-zjq.github.io/2016/12/21/Xcode-Tips/","excerpt":"","text":"禁止 documentation issue","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming Language","slug":"Technology/Programming-Language","permalink":"https://coder-zjq.github.io/categories/Technology/Programming-Language/"},{"name":"Objective-C","slug":"Technology/Programming-Language/Objective-C","permalink":"https://coder-zjq.github.io/categories/Technology/Programming-Language/Objective-C/"}],"tags":[{"name":"＠property","slug":"＠property","permalink":"https://coder-zjq.github.io/tags/＠property/"},{"name":"＠synthesize","slug":"＠synthesize","permalink":"https://coder-zjq.github.io/tags/＠synthesize/"},{"name":"＠dynamic","slug":"＠dynamic","permalink":"https://coder-zjq.github.io/tags/＠dynamic/"}]},{"title":"科学上网（超简单）","slug":"how-to-fly-over-the-great-wall","date":"2016-12-06T03:40:46.000Z","updated":"2016-12-06T05:03:43.000Z","comments":true,"path":"2016/12/06/how-to-fly-over-the-great-wall/","link":"","permalink":"https://coder-zjq.github.io/2016/12/06/how-to-fly-over-the-great-wall/","excerpt":"找到对应平台的 Hosts 文件位置 备份你的 Hosts 文件 下载对应平台的更新工具 下载 Hosts 镜像 使用下载的更新工具更新 Hosts","text":"找到对应平台的 Hosts 文件位置 备份你的 Hosts 文件 下载对应平台的更新工具 下载 Hosts 镜像 使用下载的更新工具更新 Hosts e.g. Have fun… 想了解更多可查看：https://github.com/racaljk/hosts/blob/master/README.md","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tips","slug":"Technology/Tips","permalink":"https://coder-zjq.github.io/categories/Technology/Tips/"},{"name":"Other","slug":"Technology/Tips/Other","permalink":"https://coder-zjq.github.io/categories/Technology/Tips/Other/"}],"tags":[{"name":"Hosts","slug":"Hosts","permalink":"https://coder-zjq.github.io/tags/Hosts/"}]},{"title":"用 yarn 代替 npm 管理 React-Native 包依赖","slug":"change-npm-to-yarn","date":"2016-11-22T14:23:23.000Z","updated":"2016-11-22T14:50:49.000Z","comments":true,"path":"2016/11/22/change-npm-to-yarn/","link":"","permalink":"https://coder-zjq.github.io/2016/11/22/change-npm-to-yarn/","excerpt":"","text":"首先得安装 yarn，可参考Yarn Installation on macOS在命令行中输入：$ yarn global add react-native-cli 之后使用 react-native init 就是用 yarn 来下载包：","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tools","slug":"Technology/Tools","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/"},{"name":"Yarn","slug":"Technology/Tools/Yarn","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/Yarn/"}],"tags":[{"name":"yarn","slug":"yarn","permalink":"https://coder-zjq.github.io/tags/yarn/"},{"name":"npm","slug":"npm","permalink":"https://coder-zjq.github.io/tags/npm/"}]},{"title":"Using a ListView","slug":"RN(8)_Using-a-ListView","date":"2016-10-25T05:57:17.000Z","updated":"2016-11-22T14:54:42.000Z","comments":true,"path":"2016/10/25/RN(8)_Using-a-ListView/","link":"","permalink":"https://coder-zjq.github.io/2016/10/25/RN(8)_Using-a-ListView/","excerpt":"import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, View, Text, Image, ScrollView&#125; from 'react-native';export default class AwesomeProject extends Component &#123; render() &#123; return ( &lt;ScrollView style=&#123;&#123;marginTop:20&#125;&#125;&gt; &lt;Text style=&#123;&#123;fontSize:20&#125;&#125;&gt; 哈哈，我在上面。。。 &lt;/Text&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Text style=&#123;&#123;fontSize:20&#125;&#125;&gt; 哈哈，我在中间。。。 &lt;/Text&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Text style=&#123;&#123;fontSize:20&#125;&#125;&gt; 哈哈，我在下面。。。 &lt;/Text&gt; &lt;/ScrollView&gt; ); &#125;&#125;AppRegistry.registerComponent('AwesomeProject', () =&gt; AwesomeProject);","text":"import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, View, Text, Image, ScrollView&#125; from 'react-native';export default class AwesomeProject extends Component &#123; render() &#123; return ( &lt;ScrollView style=&#123;&#123;marginTop:20&#125;&#125;&gt; &lt;Text style=&#123;&#123;fontSize:20&#125;&#125;&gt; 哈哈，我在上面。。。 &lt;/Text&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Text style=&#123;&#123;fontSize:20&#125;&#125;&gt; 哈哈，我在中间。。。 &lt;/Text&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Image source=&#123;require(\"./icon.png\")&#125;/&gt; &lt;Text style=&#123;&#123;fontSize:20&#125;&#125;&gt; 哈哈，我在下面。。。 &lt;/Text&gt; &lt;/ScrollView&gt; ); &#125;&#125;AppRegistry.registerComponent('AwesomeProject', () =&gt; AwesomeProject);","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"React Native","slug":"Technology/Programming/React-Native","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://coder-zjq.github.io/tags/React-Native/"},{"name":"ListView","slug":"ListView","permalink":"https://coder-zjq.github.io/tags/ListView/"}]},{"title":"vscode 更改显示语言","slug":"how-to-change-vscode-language","date":"2016-10-23T01:31:48.000Z","updated":"2016-11-22T14:57:16.000Z","comments":true,"path":"2016/10/23/how-to-change-vscode-language/","link":"","permalink":"https://coder-zjq.github.io/2016/10/23/how-to-change-vscode-language/","excerpt":"","text":"Configure Language 指令 shift + command 唤出 Command Palette 输入 Configure Language 确定 编辑 locale.json 文件&#123; // 定义 VSCode 的显示语言。 // 请参阅 https://go.microsoft.com/fwlink/?LinkId=761051，了解支持的语言列表。 // 要更改值需要重启 VSCode。 \"locale\":\"en\"&#125; 可选的语言环境 Display Language Locale English (US) en Simplified Chinese zh-CN Traditional Chinese zh-TW French fr German de Italian it Japanese ja Korean ko Russian ru Spanish es","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tips","slug":"Technology/Tips","permalink":"https://coder-zjq.github.io/categories/Technology/Tips/"},{"name":"VSCode","slug":"Technology/Tips/VSCode","permalink":"https://coder-zjq.github.io/categories/Technology/Tips/VSCode/"}],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"https://coder-zjq.github.io/tags/VSCode/"}]},{"title":"Yarn Usage","slug":"yarn-usage","date":"2016-10-13T06:05:36.000Z","updated":"2016-11-22T14:42:10.000Z","comments":true,"path":"2016/10/13/yarn-usage/","link":"","permalink":"https://coder-zjq.github.io/2016/10/13/yarn-usage/","excerpt":"初始化一个新项目$ yarn init 添加依赖包$ yarn add [package]$ yarn add [package]@[version]$ yarn add [package]@[tag]","text":"初始化一个新项目$ yarn init 添加依赖包$ yarn add [package]$ yarn add [package]@[version]$ yarn add [package]@[tag] 更新依赖包$ yarn upgrade [package]$ yarn upgrade [package]@[version]$ yarn upgrade [package]@[tag] 移除依赖包$ yarn remove [package] 安装项目的所有依赖包$ yarn or$ yarn install Yarn Usage","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tools","slug":"Technology/Tools","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/"},{"name":"Yarn","slug":"Technology/Tools/Yarn","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/Yarn/"}],"tags":[{"name":"yarn","slug":"yarn","permalink":"https://coder-zjq.github.io/tags/yarn/"}]},{"title":"Yarn Installation","slug":"yarn-installation","date":"2016-10-13T05:28:17.000Z","updated":"2016-11-23T02:36:14.000Z","comments":true,"path":"2016/10/13/yarn-installation/","link":"","permalink":"https://coder-zjq.github.io/2016/10/13/yarn-installation/","excerpt":"macOSHomebrew你可以通过 Homebrew package manager，这同时会安装 Node.js 如果没有安装的话。 $ brew update$ brew install yarn 设置 Path 环境变量你需要通过你的终端设置 Path 环境变量，使 Yarn 的执行包可以全局访问。 在你的配置文件（可能是你的 .profile,.bashrc,.zshrc文件，等等。）里加入 export PATH=&quot;$PATH:yarn global bin&quot;","text":"macOSHomebrew你可以通过 Homebrew package manager，这同时会安装 Node.js 如果没有安装的话。 $ brew update$ brew install yarn 设置 Path 环境变量你需要通过你的终端设置 Path 环境变量，使 Yarn 的执行包可以全局访问。 在你的配置文件（可能是你的 .profile,.bashrc,.zshrc文件，等等。）里加入 export PATH=&quot;$PATH:yarn global bin&quot; Windows在 Windows 上有两种可选的方式来安装 Yarn。 下载安装包下载安装包你会得到一个 .msi 文件，运行该文件会指引你安装 Yarn。 如果你通过安装包安装，你需先安装 Node.js。 点击下载安装包 通过 Chocolatey 安装Chocolatey 是 Windows 上的包管理工具，你可以通过这里的指示安装 Chocolatey. 如果你已经安装了 Chocolatey，你可以通过在你的命令行你运行如下代码来安装 Yarn: choco install yarn 这同样得确保你已经安装了 Node.js. 注意你需要清空你的文件夹以及防病毒软件里的 Yarn 缓存目录（ %LocalAppData%\\Yarn ） ，否则安装包时会特别慢，因为每个文件在写入硬盘时都会被扫描。 可以在终端运行如下命令测试 Yarn 是否已安装成功： $ yarn --version 安装成功的话则会显示 Yarn 安装的版本信息： 首先得安装 Node.js最简单的通过脚本安装$ curl -o- -L https://yarnpkg.com/install.sh | bash npm$ npm install --global yarn ManualYou can install Yarn by downloading a tarball and extracting it anywhere.OR# install wget first$ cd /opt$ wget https://yarnpkg.com/latest.tar.gz$ tar zvxf yarn-*.tar.gz# Yarn is now in /opt/yarn-[version]/ Test$ yarn --version Uninstall$ rm -rf ~/.yarn Yarn Installation","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tools","slug":"Technology/Tools","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/"},{"name":"Yarn","slug":"Technology/Tools/Yarn","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/Yarn/"}],"tags":[{"name":"yarn","slug":"yarn","permalink":"https://coder-zjq.github.io/tags/yarn/"}]},{"title":"The let keyword in ES6","slug":"The_let_keyword_in ES6","date":"2016-10-08T12:42:26.000Z","updated":"2016-11-22T15:03:53.000Z","comments":true,"path":"2016/10/08/The_let_keyword_in ES6/","link":"","permalink":"https://coder-zjq.github.io/2016/10/08/The_let_keyword_in ES6/","excerpt":"The let keyword in ES6 let 命令声明的变量只在其所在的代码块内有效： &#123; let a = 10; var b = 20;&#125;a; // a is not definedb; // use varvar fs = [];for (var i = 0; i &lt; 10; i++) &#123; fs.push(() =&gt; console.log(i));&#125;fs.forEach(f =&gt; f());// the log is:// 10// 10// 10// 10// 10// 10// 10// 10// 10// 10// use letvar fs = [];for (let i = 0; i &lt; 10; i++) &#123; fs.push(() =&gt; console.log(i));&#125;fs.forEach(f =&gt; f());// the log is:// 0// 1// 2// 3// 4// 5// 6// 7// 8// 9","text":"The let keyword in ES6 let 命令声明的变量只在其所在的代码块内有效： &#123; let a = 10; var b = 20;&#125;a; // a is not definedb; // use varvar fs = [];for (var i = 0; i &lt; 10; i++) &#123; fs.push(() =&gt; console.log(i));&#125;fs.forEach(f =&gt; f());// the log is:// 10// 10// 10// 10// 10// 10// 10// 10// 10// 10// use letvar fs = [];for (let i = 0; i &lt; 10; i++) &#123; fs.push(() =&gt; console.log(i));&#125;fs.forEach(f =&gt; f());// the log is:// 0// 1// 2// 3// 4// 5// 6// 7// 8// 9 不允许重复声明： // 1.function () &#123; let a = 10; var a = 1; // 报错&#125;// 2.function () &#123; let a = 10; let a = 1; // 报错&#125;// 3.function func(arg) &#123; let arg; // 报错&#125;// 4.function func(arg) &#123; &#123; let arg; // 不报错 &#125;&#125; ​ // 1. var message = \"hi\";&#123; var message = \"bye\";&#125;// \"bye\"console.log(message);// 2.var message = \"hi\";function greet()&#123; var message = \"bye\";&#125;// \"hi\"console.log(message);// 3. let message = \"hi\";&#123; let message = \"bye\";&#125;// \"hi\"console.log(message); var fs = [];for (var i = 0; i &lt; 10; i++) &#123; fs.push(() =&gt; console.log(i));&#125;fs.forEach(f =&gt; f());// 10// 10// 10// 10// 10// 10// 10// 10// 10// 10var fs = [];for (let i = 0; i &lt; 10; i++) &#123; fs.push(() =&gt; console.log(i));&#125;fs.forEach(f =&gt; f());// 0// 1// 2// 3// 4// 5// 6// 7// 8// 9 function varFunction() &#123; var previous = 0; var current = 1; var i; var temp; for(i = 0; i &lt; 10; i += 1) &#123; temp = previous; previous = current; current = temp + current; &#125;&#125;// safe wayfunction letFunction() &#123; let previous = 0; let current = 1; for(let i =0; i &lt; 10; i += 1)&#123; let temp = previous; previous = current; current = temp + current; &#125;&#125; 参考：let和const命令","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"ES6","slug":"Technology/Programming/ES6","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/ES6/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://coder-zjq.github.io/tags/ES6/"},{"name":"let","slug":"let","permalink":"https://coder-zjq.github.io/tags/let/"}]},{"title":"RN(7) Layout With Flexbox","slug":"RN(7)_Layout_with_Flexbox","date":"2016-10-07T12:42:26.000Z","updated":"2016-11-22T14:54:07.000Z","comments":true,"path":"2016/10/07/RN(7)_Layout_with_Flexbox/","link":"","permalink":"https://coder-zjq.github.io/2016/10/07/RN(7)_Layout_with_Flexbox/","excerpt":"Layout with Flexbox1. Flex Directionimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, View &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( // Try setting `flexDirection` to `column`. &lt;View style=&#123;&#123;flex : 1, flexDirection : 'row'&#125;&#125;&gt; &lt;View style=&#123;styles.smallBlue&#125; /&gt; &lt;View style=&#123;styles.middleBlue&#125; /&gt; &lt;View style=&#123;styles.bigBlue&#125; /&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; smallBlue : &#123; backgroundColor : 'powderblue', width : 50, height : 50 &#125;, middleBlue : &#123; backgroundColor : 'skyblue', width : 50, height : 50 &#125;, bigBlue : &#123; backgroundColor : 'steelblue', width : 50, height : 50 &#125;&#125;);AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);","text":"Layout with Flexbox1. Flex Directionimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, View &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( // Try setting `flexDirection` to `column`. &lt;View style=&#123;&#123;flex : 1, flexDirection : 'row'&#125;&#125;&gt; &lt;View style=&#123;styles.smallBlue&#125; /&gt; &lt;View style=&#123;styles.middleBlue&#125; /&gt; &lt;View style=&#123;styles.bigBlue&#125; /&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; smallBlue : &#123; backgroundColor : 'powderblue', width : 50, height : 50 &#125;, middleBlue : &#123; backgroundColor : 'skyblue', width : 50, height : 50 &#125;, bigBlue : &#123; backgroundColor : 'steelblue', width : 50, height : 50 &#125;&#125;);AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject); 2. Justify Contentimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, View &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( // Try setting `justifyContent` to `center`. // Try setting `flexDirection` to `row`. &lt;View style=&#123;&#123;flex : 1, flexDirection : 'row', justifyContent : 'space-between'&#125;&#125;&gt; &lt;View style=&#123;styles.smallBlue&#125; /&gt; &lt;View style=&#123;styles.middleBlue&#125; /&gt; &lt;View style=&#123;styles.bigBlue&#125; /&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; smallBlue : &#123; backgroundColor : 'powderblue', width : 50, height : 50 &#125;, middleBlue : &#123; backgroundColor : 'skyblue', width : 50, height : 50 &#125;, bigBlue : &#123; backgroundColor : 'steelblue', width : 50, height : 50 &#125;&#125;);AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject); 3. Align Itemsimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, View &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( // Try setting `alignItems` to 'flex-start' // Try setting `justifyContent` to `flex-end`. // Try setting `flexDirection` to `row`. &lt;View style=&#123;&#123;flex : 1, flexDirection : 'column', justifyContent : 'center', alignItems : 'center'&#125;&#125;&gt; &lt;View style=&#123;styles.smallBlue&#125; /&gt; &lt;View style=&#123;styles.middleBlue&#125; /&gt; &lt;View style=&#123;styles.bigBlue&#125; /&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; smallBlue : &#123; backgroundColor : 'powderblue', width : 50, height : 50 &#125;, middleBlue : &#123; backgroundColor : 'skyblue', width : 50, height : 50 &#125;, bigBlue : &#123; backgroundColor : 'steelblue', width : 50, height : 50 &#125;&#125;);AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject); More info: Layout Props","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"React Native","slug":"Technology/Programming/React-Native","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://coder-zjq.github.io/tags/React-Native/"}]},{"title":"RN(6) Width Height","slug":"RN(6)_Width_Height","date":"2016-10-06T12:42:26.000Z","updated":"2016-11-22T14:54:01.000Z","comments":true,"path":"2016/10/06/RN(6)_Width_Height/","link":"","permalink":"https://coder-zjq.github.io/2016/10/06/RN(6)_Width_Height/","excerpt":"Width &amp; Height1. Fixed Dimensionsimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( &lt;View&gt; &lt;View style=&#123;styles.smallBlue&#125; /&gt; &lt;View style=&#123;styles.middleBlue&#125; /&gt; &lt;View style=&#123;styles.bigBlue&#125; /&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; smallBlue : &#123; backgroundColor : 'powderblue', width : 50, height : 50 &#125;, middleBlue : &#123; backgroundColor : 'skyblue', width : 100, height : 100 &#125;, bigBlue : &#123; backgroundColor : 'steelblue', width : 150, height : 150 &#125;&#125;);AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);","text":"Width &amp; Height1. Fixed Dimensionsimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( &lt;View&gt; &lt;View style=&#123;styles.smallBlue&#125; /&gt; &lt;View style=&#123;styles.middleBlue&#125; /&gt; &lt;View style=&#123;styles.bigBlue&#125; /&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; smallBlue : &#123; backgroundColor : 'powderblue', width : 50, height : 50 &#125;, middleBlue : &#123; backgroundColor : 'skyblue', width : 100, height : 100 &#125;, bigBlue : &#123; backgroundColor : 'steelblue', width : 150, height : 150 &#125;&#125;);AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject); 2. Flex Dimensionsimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( &lt;View style=&#123;&#123;flex : 1&#125;&#125;&gt; &lt;View style=&#123;styles.smallBlue&#125; /&gt; &lt;View style=&#123;styles.middleBlue&#125; /&gt; &lt;View style=&#123;styles.bigBlue&#125; /&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; smallBlue : &#123; backgroundColor : 'powderblue', flex : 1 &#125;, middleBlue : &#123; backgroundColor : 'skyblue', flex : 2 &#125;, bigBlue : &#123; backgroundColor : 'steelblue', flex : 3 &#125;&#125;);AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"React Native","slug":"Technology/Programming/React-Native","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://coder-zjq.github.io/tags/React-Native/"}]},{"title":"RN(5) Style","slug":"RN(5)_Style","date":"2016-10-05T12:42:26.000Z","updated":"2016-11-22T14:53:48.000Z","comments":true,"path":"2016/10/05/RN(5)_Style/","link":"","permalink":"https://coder-zjq.github.io/2016/10/05/RN(5)_Style/","excerpt":"Styleimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( &lt;View&gt; &lt;Text style=&#123;styles.justRed&#125;&gt;just red text&lt;/Text&gt; &lt;Text style=&#123;styles.bigGreen&#125;&gt;just big green text&lt;/Text&gt; &lt;Text style=&#123;[styles.bigGreen, styles.justRed]&#125;&gt;big green then red text&lt;/Text&gt; &lt;Text style=&#123;[styles.justRed, styles.bigGreen]&#125;&gt;red then big green text&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; bigGreen : &#123; color : '#00ff00', fontWeight : 'bold', fontSize : 25 &#125;, justRed : &#123; color : 'red', &#125;,&#125;);AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);","text":"Styleimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( &lt;View&gt; &lt;Text style=&#123;styles.justRed&#125;&gt;just red text&lt;/Text&gt; &lt;Text style=&#123;styles.bigGreen&#125;&gt;just big green text&lt;/Text&gt; &lt;Text style=&#123;[styles.bigGreen, styles.justRed]&#125;&gt;big green then red text&lt;/Text&gt; &lt;Text style=&#123;[styles.justRed, styles.bigGreen]&#125;&gt;red then big green text&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; bigGreen : &#123; color : '#00ff00', fontWeight : 'bold', fontSize : 25 &#125;, justRed : &#123; color : 'red', &#125;,&#125;);AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject); More info about Text style: Text component reference","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"React Native","slug":"Technology/Programming/React-Native","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://coder-zjq.github.io/tags/React-Native/"}]},{"title":"RN(4) State","slug":"RN(4)_State","date":"2016-10-04T12:42:26.000Z","updated":"2016-11-22T14:53:38.000Z","comments":true,"path":"2016/10/04/RN(4)_State/","link":"","permalink":"https://coder-zjq.github.io/2016/10/04/RN(4)_State/","excerpt":"Stateimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, Text, View &#125; from 'react-native';class Blink extends Component &#123; constructor(props) &#123; super(props); this.state = &#123;showText: true&#125;; setInterval(() =&gt; &#123; this.setState(&#123;showText: !this.state.showText&#125;); &#125;, 1000); &#125; render() &#123; let display = this.state.showText ? this.props.text : ''; return ( &lt;Text&gt;&#123;display&#125;&lt;/Text&gt; ); &#125;&#125;class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( &lt;View&gt; &lt;Blink text='I love to blink' /&gt; &lt;Blink text='Yes blinking is so great' /&gt; &lt;Blink text='Why did they ever take this out of HTML' /&gt; &lt;Blink text='Look at me look at me look at me' /&gt; &lt;/View&gt; ); &#125;&#125;AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);","text":"Stateimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, Text, View &#125; from 'react-native';class Blink extends Component &#123; constructor(props) &#123; super(props); this.state = &#123;showText: true&#125;; setInterval(() =&gt; &#123; this.setState(&#123;showText: !this.state.showText&#125;); &#125;, 1000); &#125; render() &#123; let display = this.state.showText ? this.props.text : ''; return ( &lt;Text&gt;&#123;display&#125;&lt;/Text&gt; ); &#125;&#125;class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( &lt;View&gt; &lt;Blink text='I love to blink' /&gt; &lt;Blink text='Yes blinking is so great' /&gt; &lt;Blink text='Why did they ever take this out of HTML' /&gt; &lt;Blink text='Look at me look at me look at me' /&gt; &lt;/View&gt; ); &#125;&#125;AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"React Native","slug":"Technology/Programming/React-Native","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://coder-zjq.github.io/tags/React-Native/"}]},{"title":"RN(3) Props","slug":"RN(3)_Props","date":"2016-10-03T12:42:26.000Z","updated":"2016-11-22T14:53:32.000Z","comments":true,"path":"2016/10/03/RN(3)_Props/","link":"","permalink":"https://coder-zjq.github.io/2016/10/03/RN(3)_Props/","excerpt":"PropsBananasimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, Image &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; let pic = &#123; uri : 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg' &#125;; return ( &lt;Image source=&#123;pic&#125; style=&#123;&#123;width: 193, height: 110&#125;&#125;/&gt; ); &#125;&#125;AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);","text":"PropsBananasimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, Image &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; let pic = &#123; uri : 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg' &#125;; return ( &lt;Image source=&#123;pic&#125; style=&#123;&#123;width: 193, height: 110&#125;&#125;/&gt; ); &#125;&#125;AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject); LotsOfGreetingsimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, Text, View &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( &lt;View style=&#123;&#123;alignItems:'center'&#125;&#125;&gt; &lt;Greeting name='Joker'/&gt; &lt;Greeting name='Peter'/&gt; &lt;Greeting name='Mike'/&gt; &lt;/View&gt; ); &#125;&#125;class Greeting extends Component &#123; render() &#123; return ( &lt;Text&gt; Hello &#123;this.props.name&#125;! &lt;/Text&gt; ); &#125;&#125;AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"React Native","slug":"Technology/Programming/React-Native","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://coder-zjq.github.io/tags/React-Native/"}]},{"title":"RN(1) Build The Environment","slug":"RN(1)_Build_The_Environment","date":"2016-10-02T12:42:26.000Z","updated":"2016-11-22T14:53:14.000Z","comments":true,"path":"2016/10/02/RN(1)_Build_The_Environment/","link":"","permalink":"https://coder-zjq.github.io/2016/10/02/RN(1)_Build_The_Environment/","excerpt":"搭建开发环境 安装 Homebrew 以搭建 Node 环境 $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 利用 Homebrew 安装 Node $ brew install node 安装 watchman $ brew link pcre$ brew install watchman","text":"搭建开发环境 安装 Homebrew 以搭建 Node 环境 $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 利用 Homebrew 安装 Node $ brew install node 安装 watchman $ brew link pcre$ brew install watchman 安装 React Native 命令行工具：react-native-cli $ npm install -g react-native-cli 运行项目 # 利用安装的 react-native-cli 初始化项目$ react-native init MyFirstReactNativeProject# 进入项目目录$ cd MyFirstReactNativeProject# 运行项目$ react-native run-ios","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"React Native","slug":"Technology/Programming/React-Native","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://coder-zjq.github.io/tags/React-Native/"}]},{"title":"RN(2) Hello World again","slug":"RN(2)_Hello_World_again","date":"2016-10-02T12:42:26.000Z","updated":"2016-11-22T14:53:24.000Z","comments":true,"path":"2016/10/02/RN(2)_Hello_World_again/","link":"","permalink":"https://coder-zjq.github.io/2016/10/02/RN(2)_Hello_World_again/","excerpt":"Hello World againimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, Text &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( &lt;Text&gt; Hello World! &lt;/Text&gt; ); &#125;&#125;AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);","text":"Hello World againimport React, &#123; Component &#125; from 'react';import &#123; AppRegistry, Text &#125; from 'react-native';class MyFirstReactNativeProject extends Component &#123; render() &#123; return ( &lt;Text&gt; Hello World! &lt;/Text&gt; ); &#125;&#125;AppRegistry.registerComponent('MyFirstReactNativeProject', () =&gt; MyFirstReactNativeProject);","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"React Native","slug":"Technology/Programming/React-Native","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/React-Native/"}],"tags":[{"name":"React Native","slug":"React-Native","permalink":"https://coder-zjq.github.io/tags/React-Native/"}]},{"title":"Arrow Function => in ES6","slug":"ES6_Arrow_Function","date":"2016-10-01T12:42:26.000Z","updated":"2016-11-22T14:51:18.000Z","comments":true,"path":"2016/10/01/ES6_Arrow_Function/","link":"","permalink":"https://coder-zjq.github.io/2016/10/01/ES6_Arrow_Function/","excerpt":"Arrow Function =&gt; in ES6Arrow Function syntaxvar greet = function (message, name) &#123; return message + name;&#125;// arrow functionvar arrowGreet1 = (message, name) =&gt; &#123; return message + name;&#125;var arrowGreet2 = (message, name) =&gt; message + name;var square = x =&gt; x ^ 2;","text":"Arrow Function =&gt; in ES6Arrow Function syntaxvar greet = function (message, name) &#123; return message + name;&#125;// arrow functionvar arrowGreet1 = (message, name) =&gt; &#123; return message + name;&#125;var arrowGreet2 = (message, name) =&gt; message + name;var square = x =&gt; x ^ 2; this in Arrow Function syntaxvar deliveryBoy = &#123; name: \"Joker\", handleMessage: function (message, handler) &#123; return handler(message); &#125;, receive: function () &#123; var that = this; this.handleMessage(\"Hello, \", function (message) &#123; that.name; console.log(message + that.name); &#125;) &#125;&#125;deliveryBoy.receive();// arrow functionvar arrowDelieveryBoy = &#123; name: \"Joker\", handleMessage: (message, handler) =&gt; handler(message), receive: function () &#123; this.handleMessage(\"Hello, \", message =&gt; console.log(message + this.name)); &#125;&#125;arrowDelieveryBoy.receive();","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"ES6","slug":"Technology/Programming/ES6","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/ES6/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://coder-zjq.github.io/tags/ES6/"},{"name":"Arrow Function","slug":"Arrow-Function","permalink":"https://coder-zjq.github.io/tags/Arrow-Function/"}]},{"title":"SVN 常用指令","slug":"SVN-code","date":"2016-09-15T11:49:04.000Z","updated":"2016-11-22T14:46:01.000Z","comments":true,"path":"2016/09/15/SVN-code/","link":"","permalink":"https://coder-zjq.github.io/2016/09/15/SVN-code/","excerpt":"基本使用帮助信息$ svn help$ svn help help","text":"基本使用帮助信息$ svn help$ svn help help 导入数据至你的远程版本库 导入文件和目录 $ svn import [file-path] [svn-path] -m \"[message]\" 推荐的版本库布局 $ svn list file:///var/svn/single-project-repotrunk/branches/tags/$ svn list file:///var/svn/multi-project-repoproject-A/project-B/$ svn list file:///var/svn/multi-project-repo/project-Atrunk/branches/tags/ 从远程版本库导出至本地工作区$ svn checkout [svn-path] 更新工作区$ svn update 修改工作区# 将文件或文件夹下文件添加至版本库，若只需添加文件夹可以使用 --depth=empth$ svn add [file-path] | [dir-path]# 从版本库删除$ svn delete [file-path] | [dir-path]# $ svn copy$ svn move$ svn mkdir 查看修改$ svn status$ svn status [file-path]$ svn status -v$ svn status -u -v 查看修改详情$ svn diff$ svn diff &gt; patchfile 恢复修改$ svn revert ####","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tools","slug":"Technology/Tools","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/"},{"name":"SVN","slug":"Technology/Tools/SVN","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/SVN/"}],"tags":[{"name":"SVN","slug":"SVN","permalink":"https://coder-zjq.github.io/tags/SVN/"}]},{"title":"SVN 的简单使用","slug":"SVN","date":"2016-09-08T01:55:09.000Z","updated":"2016-11-22T14:42:59.000Z","comments":true,"path":"2016/09/08/SVN/","link":"","permalink":"https://coder-zjq.github.io/2016/09/08/SVN/","excerpt":"创建代码库$ svnadmin create /Users/Joker/svn/MyRepo","text":"创建代码库$ svnadmin create /Users/Joker/svn/MyRepo 设置代码库权限以及相关配置修改代码库文件夹下的 conf/svnserve.conf 文件$ vi /Users/Joker/svn/MyRepo/conf/svnserve.conf 删除以下几项前的 # 号，表示代码库可读可写，用户密码等配置在 passwd 文件，授权信息在 authz 文件# anon-access = read # auth-access = write # password-db = passwd # authz-db = authz 配置用户密码等信息编辑代码库文件夹下的 conf/passwd 文件$ vi /Users/Joker/svn/MyRepo/conf/passwd 在 [users] 标签下添加用户信息，表示账号为：zjq，密码为：123[users]zjq = 123 配置用户组或用户权限编辑代码库文件夹下的 conf/authz 文件$ vi /Users/Joker/svn/MyRepo/conf/authz 可以将若干用户分为一组，统一配置权限，[/] 表示代码库下所有文件，rw 表示可读可写[groups]group1 = zjq, joker[/]@group1 = rw 也可以单独给用户配置权限，注意给用户单独配置权限不需要 @[/]zjq = rw 启动 SVN 服务器$ svnserve -d -r /Users/Joker/svn/MyRepo 使用 SVN从本地导入代码至服务器$ svn import [file-path] [server-path] --username=zjq --password=123 -m \"initialize\" 从服务器下载代码至本地代码库$ svn checkout [server-path] --username=zjq --password=123 [repo-path] 提交修改至服务器$ svn commit -m &quot;modified the file&quot; 更新服务器代码至本地代码库$ svn update 查看帮助信息$ svn help","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tools","slug":"Technology/Tools","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/"},{"name":"SVN","slug":"Technology/Tools/SVN","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/SVN/"}],"tags":[{"name":"SVN","slug":"SVN","permalink":"https://coder-zjq.github.io/tags/SVN/"}]},{"title":"MJExtension 的使用","slug":"MJExtension","date":"2016-09-06T06:42:31.000Z","updated":"2016-11-22T14:52:47.000Z","comments":true,"path":"2016/09/06/MJExtension/","link":"","permalink":"https://coder-zjq.github.io/2016/09/06/MJExtension/","excerpt":"Define the models// Define JQPerson model#import &lt;Foundation/Foundation.h&gt;@class JQChild;typedef NS_ENUM(NSInteger, JQSex) &#123; JQSexMale = 0, JQSexFemale, JQSexUnknown&#125;;@interface JQPerson : NSObject@property (nonatomic, copy) NSString *name;@property (nonatomic, assign) NSInteger age;@property (nonatomic, assign) JQSex sex;@property (nonatomic, copy) NSString *address;@property (nonatomic, assign, getter=isMarried) BOOL marriage;@property (nonatomic, strong) JQChild *child;@end/**************************************************************/// Define JQChild model#import &lt;Foundation/Foundation.h&gt;@interface JQChild : NSObject@property (nonatomic, copy) NSString *name;@property (nonatomic, assign) NSInteger age;@end","text":"Define the models// Define JQPerson model#import &lt;Foundation/Foundation.h&gt;@class JQChild;typedef NS_ENUM(NSInteger, JQSex) &#123; JQSexMale = 0, JQSexFemale, JQSexUnknown&#125;;@interface JQPerson : NSObject@property (nonatomic, copy) NSString *name;@property (nonatomic, assign) NSInteger age;@property (nonatomic, assign) JQSex sex;@property (nonatomic, copy) NSString *address;@property (nonatomic, assign, getter=isMarried) BOOL marriage;@property (nonatomic, strong) JQChild *child;@end/**************************************************************/// Define JQChild model#import &lt;Foundation/Foundation.h&gt;@interface JQChild : NSObject@property (nonatomic, copy) NSString *name;@property (nonatomic, assign) NSInteger age;@end JSON -&gt; Model: + mj_objectWithKeyValues// Define a JSON dictionaryNSDictionary *personDict = @&#123; @\"name\":@\"zjq\", @\"age\":@(24), @\"sex\":@(JQSexMale), @\"address\":@\"FuZhou\", @\"marriage\":@\"false\" &#125;;// JSON -&gt; JQPersonJQPerson *person = [JQPerson mj_objectWithKeyValues:personDict];// PrintNSLog(@\"name:%@, age:%ld, sex:%ld, address:%@, marriage:%d.\", person.name, person.age, person.sex, person.address, person.marriage);// name:zjq, age:24, sex:0, address:FuZhou, marriage:0. JSONString -&gt; Model: + mj_objectWithKeyValues// Define a JSON stringNSString *personStr = @\"&#123;\\\"name\\\":\\\"zjq\\\", \\\"age\\\":24, \\\"sex\\\":0, \\\"address\\\":\\\"FuZhou\\\", \\\"marriage\\\":\\\"false\\\"&#125;\";// JSONString -&gt; ModelJQPerson *person = [JQPerson mj_objectWithKeyValues:personDict]; // Print NSLog(@\"name:%@, age:%ld, sex:%ld, address:%@, marriage:%d.\", person.name, person.age, person.sex, person.address, person.marriage);// name:zjq, age:24, sex:0, address:FuZhou, marriage:0. Model contains model: + mj_objectWithKeyValues// Define a JSON dictionaryNSDictionary *personDict = @&#123; @\"name\":@\"zjt\", @\"age\":@(31), @\"sex\":@(JQSexMale), @\"address\":@\"FuZhou\", @\"marriage\":@\"true\", @\"child\":@&#123; @\"name\":@\"zje\", @\"age\":@(2) &#125; &#125;;// JSON -&gt; JQPersonJQPerson *person = [JQPerson mj_objectWithKeyValues:personDict]; // Print NSLog(@\"name:%@, age:%ld, sex:%ld, address:%@, marriage:%d, childname:%@, childage:%ld.\", person.name, person.age, person.sex, person.address, person.marriage, person.child.name, person.child.age);// name:zjt, age:31, sex:0, address:FuZhou, marriage:1, childname:zje, childage:2. Model -&gt; JSON: - mj_keyValues// New modelUser *user = [[User alloc] init];user.name = @\"Jack\";user.icon = @\"lufy.png\";Status *status = [[Status alloc] init];status.user = user;status.text = @\"Nice mood!\";// Status -&gt; JSONNSDictionary *statusDict = status.mj_keyValues;NSLog(@\"%@\", statusDict);/* &#123; text = \"Nice mood!\"; user = &#123; icon = \"lufy.png\"; name = Jack; &#125;; &#125; */// More complex situationStudent *stu = [[Student alloc] init];stu.ID = @\"123\";stu.oldName = @\"rose\";stu.nowName = @\"jack\";stu.desc = @\"handsome\";stu.nameChangedTime = @\"2018-09-08\";Bag *bag = [[Bag alloc] init];bag.name = @\"a red bag\";bag.price = 205;stu.bag = bag;NSDictionary *stuDict = stu.mj_keyValues;NSLog(@\"%@\", stuDict);/*&#123; ID = 123; bag = &#123; name = \"\\U5c0f\\U4e66\\U5305\"; price = 205; &#125;; desc = handsome; nameChangedTime = \"2018-09-08\"; nowName = jack; oldName = rose;&#125; */ Model contains model array: + mj_objectClassInArray; + mj_setupObjectClassInArray:;// Change The child model to childs array@interface JQPerson : NSObject@property (nonatomic, copy) NSString *name;@property (nonatomic, assign) NSInteger age;@property (nonatomic, assign) JQSex sex;@property (nonatomic, copy) NSString *address;@property (nonatomic, assign, getter=isMarried) BOOL marriage;@property (nonatomic, strong) NSArray *childs;@end// JQPerson.m implements +mj_objectClassInArray method to tell MJExtension what type model will be contained in childs+ (NSDictionary *)mj_objectClassInArray &#123; return @&#123; @\"childs\":@\"JQChild\" &#125;;&#125;// Or setup by this before serialization[JQPerson mj_setupObjectClassInArray:^NSDictionary *&#123; return @&#123;@\"childs\":@\"JQChild\"&#125;; &#125;];/**************************************************************/// Define a JSON dictionaryNSDictionary *personDict = @&#123; @\"name\":@\"zjt\", @\"age\":@(31), @\"sex\":@(JQSexMale), @\"address\":@\"FuZhou\", @\"marriage\":@\"true\", @\"childs\":@[@&#123; @\"name\":@\"zje\", @\"age\":@(2) &#125;, @&#123; @\"name\":@\"zjj\", @\"age\":@(4) &#125;] &#125;;// JSON -&gt; ModelJQPerson *person = [JQPerson mj_objectWithKeyValues:personDict];// Printfor (JQChild *child in person.childs) &#123; NSLog(@\"childname:%@, childage:%ld\\n\", child.name, child.age);&#125;// childname:zje, childage:2// childname:zjj, childage:4 JSON array -&gt; model array: + mj_objectArrayWithKeyValuesArrayNSArray *dictArray = @[ @&#123; @\"name\" : @\"Jack\", @\"icon\" : @\"lufy.png\" &#125;, @&#123; @\"name\" : @\"Rose\", @\"icon\" : @\"nami.png\" &#125; ];// JSON array -&gt; User arrayNSArray *userArray = [User mj_objectArrayWithKeyValuesArray:dictArray];// Printingfor (User *user in userArray) &#123; NSLog(@\"name=%@, icon=%@\", user.name, user.icon);&#125;// name=Jack, icon=lufy.png// name=Rose, icon=nami.png Model array -&gt; JSON array: + mj_keyValuesArrayWithObjectArray// New model arrayUser *user1 = [[User alloc] init];user1.name = @\"Jack\";user1.icon = @\"lufy.png\";User *user2 = [[User alloc] init];user2.name = @\"Rose\";user2.icon = @\"nami.png\";NSArray *userArray = @[user1, user2];// Model array -&gt; JSON arrayNSArray *dictArray = [User mj_keyValuesArrayWithObjectArray:userArray];NSLog(@\"%@\", dictArray);/* ( &#123; icon = \"lufy.png\"; name = Jack; &#125;, &#123; icon = \"nami.png\"; name = Rose; &#125; ) */ Model name - JSON key mapping: + mj_replacedKeyFromPropertyName; + mj_setupReplacedKeyFromPropertyName;// Change the childs array to childname string@interface JQPerson : NSObject@property (nonatomic, copy) NSString *name;@property (nonatomic, assign) NSInteger age;@property (nonatomic, assign) JQSex sex;@property (nonatomic, copy) NSString *address;@property (nonatomic, assign, getter=isMarried) BOOL marriage;@property (nonatomic, copy) NSString *childname;@end// JQPerson.m implements +mj_replacedKeyFromPropertyName method to tell MJExtension how to map+ (NSDictionary *)mj_replacedKeyFromPropertyName &#123; return @&#123;@\"childname\":@\"child.name\"&#125;;&#125;// Or setup by this before serialization[JQPerson mj_setupReplacedKeyFromPropertyName:^NSDictionary *&#123; return @&#123;@\"childname\":@\"child.name\"&#125;; &#125;];/**************************************************************/// Define a JSON dictionaryNSDictionary *personDict = @&#123; @\"name\":@\"zjt\", @\"age\":@(31), @\"sex\":@(JQSexMale), @\"address\":@\"FuZhou\", @\"marriage\":@\"true\", @\"child\":@&#123; @\"name\":@\"zje\", @\"age\":@(2) &#125; &#125;;// JSON -&gt; JQPersonJQPerson *person = [JQPerson mj_objectWithKeyValues:personDict]; // Print NSLog(@\"childname:%@\", person.childname);// childname:zje NSCoding: MJExtensionCodingImplementation, + mj_setupIgnoredCodingPropertyNames:;#import \"MJExtension.h\"@implementation Bag// NSCoding ImplementationMJExtensionCodingImplementation@end/***********************************************/// what properties not to be coded[Bag mj_setupIgnoredCodingPropertyNames:^NSArray *&#123; return @[@\"name\"];&#125;];// Equals: Bag.m implements +mj_ignoredCodingPropertyNames method.// Create modelBag *bag = [[Bag alloc] init];bag.name = @\"Red bag\";bag.price = 200.8;NSString *file = [NSHomeDirectory() stringByAppendingPathComponent:@\"Desktop/bag.data\"];// Encoding[NSKeyedArchiver archiveRootObject:bag toFile:file];// DecodingBag *decodedBag = [NSKeyedUnarchiver unarchiveObjectWithFile:file];NSLog(@\"name=%@, price=%f\", decodedBag.name, decodedBag.price);// name=(null), price=200.800000 NSString -&gt; NSDate, nil -&gt; @””: - mj_newValueFromOldValue:property:// Book#import \"MJExtension.h\"@implementation Book- (id)mj_newValueFromOldValue:(id)oldValue property:(MJProperty *)property&#123; if ([property.name isEqualToString:@\"publisher\"]) &#123; if (oldValue == nil) return @\"\"; &#125; else if (property.type.typeClass == [NSDate class]) &#123; NSDateFormatter *fmt = [[NSDateFormatter alloc] init]; fmt.dateFormat = @\"yyyy-MM-dd\"; return [fmt dateFromString:oldValue]; &#125; return oldValue;&#125;@end// NSDictionaryNSDictionary *dict = @&#123; @\"name\" : @\"5分钟突破iOS开发\", @\"publishedTime\" : @\"2011-09-10\" &#125;;// NSDictionary -&gt; BookBook *book = [Book mj_objectWithKeyValues:dict];// printingNSLog(@\"name=%@, publisher=%@, publishedTime=%@\", book.name, book.publisher, book.publishedTime); MJExtension","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"Objective-C","slug":"Technology/Programming/Objective-C","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/Objective-C/"}],"tags":[{"name":"MJExtension","slug":"MJExtension","permalink":"https://coder-zjq.github.io/tags/MJExtension/"},{"name":"JSON","slug":"JSON","permalink":"https://coder-zjq.github.io/tags/JSON/"}]},{"title":"UIWebView 的简单使用","slug":"UIWebView","date":"2016-08-30T07:17:55.000Z","updated":"2016-11-22T14:55:14.000Z","comments":true,"path":"2016/08/30/UIWebView/","link":"","permalink":"https://coder-zjq.github.io/2016/08/30/UIWebView/","excerpt":"简介 你可以在你的 APP 中使用 UIWebView 内嵌网页内容，你也可以在网页浏览历史中前进或后退，甚至利用代码改变网页内容。除了 HTML 网页以外，UIWebView 还可以用来展示其它内容，例如：Keynote、PDF 以及 Pages 文档，但是为了富文本的更好渲染，还是最好使用 UITextView。","text":"简介 你可以在你的 APP 中使用 UIWebView 内嵌网页内容，你也可以在网页浏览历史中前进或后退，甚至利用代码改变网页内容。除了 HTML 网页以外，UIWebView 还可以用来展示其它内容，例如：Keynote、PDF 以及 Pages 文档，但是为了富文本的更好渲染，还是最好使用 UITextView。 使用加载页面/** * 通过 URL 请求加载页面 * * @param request URL 请求，其中 URL 可以为加载文件的路径 */- (void)loadRequest:(NSURLRequest *)request;/** * 通过载入一段 HTML 字符串加载页面 * * @param string HTML 字符串 * @param baseURL 基本路径，用于寻找页面中图片等资源 */- (void)loadHTMLString:(NSString *)string baseURL:(nullable NSURL *)baseURL;/** * 通过二进制数据加载页面（较少用） * * @param data 数据 * @param MIMEType 数据类型 * @param textEncodingName 数据编码形式 * @param baseURL 基本路径，用于寻找页面中图片等资源 */- (void)loadData:(NSData *)data MIMEType:(NSString *)MIMEType textEncodingName:(NSString *)textEncodingName baseURL:(NSURL *)baseURL; UIWebViewDelegate 代理/** * 是否根据请求开始加载页面 * * @param webView 显示页面的 UIWebView * @param request 加载的请求 * @param navigationType 用户行为类型 * * @return YES：加载页面 NO：不加载页面 */- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType;/** * WebView 已经开始加载页面 * * @param webView 显示页面的 WebView */- (void)webViewDidStartLoad:(UIWebView *)webView;/** * WebView 已经结束加载页面 * * @param webView 显示页面的 WebView */- (void)webViewDidFinishLoad:(UIWebView *)webView;/** * WebView 加载页面失败 * * @param webView 显示页面的 WebView * @param error 错误信息 */- (void)webView:(UIWebView *)webView didFailLoadWithError:(nullable NSError *)error; ####相关属性/** UIWebViewDelegate 代理 */@property (nullable, nonatomic, assign) id &lt;UIWebViewDelegate&gt; delegate;/** 内嵌的 UIScrollView */@property (nonatomic, readonly, strong) UIScrollView *scrollView NS_AVAILABLE_IOS(5_0);/** 载入的请求 */@property (nullable, nonatomic, readonly, strong) NSURLRequest *request;/** 当前页面是否可以后退 */@property (nonatomic, readonly, getter=canGoBack) BOOL canGoBack;/** 当前界面是否可以前进 */@property (nonatomic, readonly, getter=canGoForward) BOOL canGoForward;/** 当前页面是否正在加载 */@property (nonatomic, readonly, getter=isLoading) BOOL loading;/** 设置页面是否缩放至屏幕大小 */@property (nonatomic) BOOL scalesPageToFit;/** 已弃用 */@property (nonatomic) BOOL detectsPhoneNumbers NS_DEPRECATED_IOS(2_0, 3_0);/** 设置可转换成链接的类型 */@property (nonatomic) UIDataDetectorTypes dataDetectorTypes NS_AVAILABLE_IOS(3_0);/** 设置是否使用内联播放器播放，iPad 默认为 YES，iPhone 默认为 NO */@property (nonatomic) BOOL allowsInlineMediaPlayback NS_AVAILABLE_IOS(4_0);/** 设置播放器自动播放还是需用户点击，iPad 及iPhone 默认均为 YES */@property (nonatomic) BOOL mediaPlaybackRequiresUserAction NS_AVAILABLE_IOS(4_0); /** 设置是否支持 Air Play，iPad 及 iPhone 默认均为 YES */@property (nonatomic) BOOL mediaPlaybackAllowsAirPlay NS_AVAILABLE_IOS(5_0); /** 设置是否将数据加载入内存后渲染界面，iPhone 及 iPad 默认均为 NO */@property (nonatomic) BOOL suppressesIncrementalRendering NS_AVAILABLE_IOS(6_0); /** 是否自动展示键盘，默认为 YES */@property (nonatomic) BOOL keyboardDisplayRequiresUserAction NS_AVAILABLE_IOS(6_0); /** 设置当网页的大小超出view时的分页显示模式 */@property (nonatomic) UIWebPaginationMode paginationMode NS_AVAILABLE_IOS(7_0);/** 这个属性决定了CSS属性是采用column-break 还是page-breaking样式 */@property (nonatomic) UIWebPaginationBreakingMode paginationBreakingMode NS_AVAILABLE_IOS(7_0);/** 分页长度 */@property (nonatomic) CGFloat pageLength NS_AVAILABLE_IOS(7_0);/** 多个页面之间差距值 */@property (nonatomic) CGFloat gapBetweenPages NS_AVAILABLE_IOS(7_0);/** 分页个数 */@property (nonatomic, readonly) NSUInteger pageCount NS_AVAILABLE_IOS(7_0);/** 设置多媒体播放是否支持画中画 */@property (nonatomic) BOOL allowsPictureInPictureMediaPlayback NS_AVAILABLE_IOS(9_0);/** 设置是否支持链接预览 */@property (nonatomic) BOOL allowsLinkPreview NS_AVAILABLE_IOS(9_0); // default is NO 其它方法/** * 重新加载页面 */- (void)reload;/** * 停止加载页面 */- (void)stopLoading;/** * 返回至上一个页面，可以配合 canGoBack 属性使用 */- (void)goBack;/** * 前进至刚才的页面，可以配合 canGoForward 属性使用 */- (void)goForward;/** * 通过 JavaScript 获取页面字符串，可以通过该方法注入 JavaScript 改变页面 * * @param script JavaScript 字符串 * * @return 获得的字符串 */- (nullable NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script; 各枚举类型/** * 用户触发行为类型 */typedef NS_ENUM(NSInteger, UIWebViewNavigationType) &#123; UIWebViewNavigationTypeLinkClicked, //用户触发了一个链接 UIWebViewNavigationTypeFormSubmitted, //用户提交了一个表单 UIWebViewNavigationTypeBackForward, //用户触击前进前进或返回按钮 UIWebViewNavigationTypeReload, //用户触击重新加载的按钮 UIWebViewNavigationTypeFormResubmitted, //用户重复提交表单 UIWebViewNavigationTypeOther //发生了其他行为&#125;;/** * 可转换为链接的类型 */typedef NS_OPTIONS(NSUInteger, UIDataDetectorTypes) &#123; UIDataDetectorTypePhoneNumber // 电话号码 UIDataDetectorTypeLink // URL 链接 UIDataDetectorTypeAddress // 地址 UIDataDetectorTypeCalendarEvent // 日程 UIDataDetectorTypeNone // 不转换 UIDataDetectorTypeAll // 全转换&#125;;/** * 页面分页模式 */typedef NS_ENUM(NSInteger, UIWebPaginationMode) &#123; UIWebPaginationModeUnpaginated, //不使用分页效果 UIWebPaginationModeLeftToRight, //将网页超出部分分页，从左向右进行翻页 UIWebPaginationModeTopToBottom, //将网页超出部分分页，从上向下进行翻页 UIWebPaginationModeBottomToTop, //将网页超出部分分页，从下向上进行翻页 UIWebPaginationModeRightToLeft //将网页超出部分分页，从右向左进行翻页&#125;;/** * 这个枚举决定了webView加载页面具有CSS属性时是使用页的样式还是以列的样式。 */typedef NS_ENUM(NSInteger, UIWebPaginationBreakingMode) &#123; UIWebPaginationBreakingModePage, //默认设置是这个属性，CSS属性以页样式。 UIWebPaginationBreakingModeColumn //当UIWebPaginationBreakingMode 设置这个属性的时候，这个页面内容 CSS 属性以 column-break 代替 page-breaking 样式。&#125;; 注意 不可以将 UIWebView 或者 UITableView 内嵌至 UIScrollView 对象，因为触摸事件会在两个对象间混乱，因而作出错误的操作； 如果是运行在 iOS 8 以上的系统可以使用 WKWebView 取代 UIWebView。 其它可以结合一下第三方类库使用： NJKWebViewProgress：页面加载进度显示； WebViewJavascriptBridge：用于 Objective-C ↔ JavaScript 之间的交互。","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"Objective-C","slug":"Technology/Programming/Objective-C","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/Objective-C/"}],"tags":[{"name":"UIWebView","slug":"UIWebView","permalink":"https://coder-zjq.github.io/tags/UIWebView/"}]},{"title":"NJKWebViewProgress 的使用","slug":"NJKWebViewProgress","date":"2016-08-30T05:13:45.000Z","updated":"2016-11-22T14:52:57.000Z","comments":true,"path":"2016/08/30/NJKWebViewProgress/","link":"","permalink":"https://coder-zjq.github.io/2016/08/30/NJKWebViewProgress/","excerpt":"安装pod 'NJKWebViewProgress'","text":"安装pod 'NJKWebViewProgress' 使用导包并遵循协议#import \"ViewController.h\"#import \"NJKWebViewProgress.h\"#import \"NJKWebViewProgressView.h\"@interface ViewController ()&lt;NJKWebViewProgressDelegate&gt;@property (weak, nonatomic) IBOutlet UIWebView *pageLoadedWV; /**&lt; 显示加载页面的 WebView */@property (weak, nonatomic) IBOutlet NJKWebViewProgressView *pageLoadPV; /**&lt; 显示加载进度的 ProgressView */@property (nonatomic, strong) NJKWebViewProgress *progressProxy; /**&lt; 处理加载进度代理 */@end 设置代理并加载界面- (void)viewDidLoad &#123; [super viewDidLoad]; // 设置代理 self.pageLoadedWV.delegate = self.progressProxy; self.progressProxy.progressDelegate = self; // 通过请求加载页面 [self.pageLoadedWV loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@\"http://coder-zjq.me\"]]];&#125; 更新加载进度通过代理#pragma mark &lt;NJKWebViewProgressDelegate&gt;/** * 更新加载进度 * * @param webViewProgress NJKWebViewProgress 对象 * @param progress 当前加载进度 */- (void)webViewProgress:(NJKWebViewProgress *)webViewProgress updateProgress:(float)progress &#123; self.pageLoadPV.hidden = (progress == 1.0); [self.pageLoadPV setProgress:progress animated:YES];&#125; 通过 block 回调__weak typeof(self) weakSelf = self;self.progressProxy.progressBlock = ^(float progress) &#123; weakSelf.pageLoadPV.hidden = (progress == 1.0); [weakSelf.pageLoadPV setProgress:progress animated:YES];&#125;; 效果","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"Objective-C","slug":"Technology/Programming/Objective-C","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/Objective-C/"}],"tags":[{"name":"NJKWebViewProgress","slug":"NJKWebViewProgress","permalink":"https://coder-zjq.github.io/tags/NJKWebViewProgress/"}]},{"title":"block 的使用","slug":"block","date":"2016-08-27T06:02:21.000Z","updated":"2016-11-22T14:50:39.000Z","comments":true,"path":"2016/08/27/block/","link":"","permalink":"https://coder-zjq.github.io/2016/08/27/block/","excerpt":"前言 return_type：你所想要返回的数据类型； blockName：你所构造的 block 名； var_type：你所要传递的变量类型； varName：你所要传递的变量名。","text":"前言 return_type：你所想要返回的数据类型； blockName：你所构造的 block 名； var_type：你所要传递的变量类型； varName：你所要传递的变量名。 （另外参数可以传入多个） 作为变量return_type (^blockName)(var_type) = ^return_type (var_type varName)&#123; // Your code here...&#125;; 作为属性@property (copy) return_type (^blockName) (var_type); 作为方法定义参数- (void)yourMethod:(return_type (^)(var_type))blockName; 作为方法传入参数[someObject doSomethingWithBlock: ^return_type (var_type varName)&#123; // Your code here...&#125;]; 匿名 Block^return_type (var_type varName)&#123; // Your code here...&#125;; 使用 typedeftypedef return_type (^blockName)(var_type); 内联 Block^return_type (var_type varName)&#123; // Your code here...&#125;(var); 递归 Block__block return_type (^blockName)(var_type) = [^return_type (var_type varName)&#123; if (returnCondition) &#123; blockName = nil; return; &#125; // Your code here...&#125; copy];blockName(varValue); 作为返回值- (return_type(^)(var_type))methodName&#123; // Your code here...&#125; 在 swift 中blockName = (varName: var_type) -&gt; (return_type)","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"Objective-C","slug":"Technology/Programming/Objective-C","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/Objective-C/"}],"tags":[{"name":"block","slug":"block","permalink":"https://coder-zjq.github.io/tags/block/"}]},{"title":"swift 基本运算符","slug":"Basic-Operator","date":"2016-08-19T06:44:54.000Z","updated":"2016-11-22T14:50:32.000Z","comments":true,"path":"2016/08/19/Basic-Operator/","link":"","permalink":"https://coder-zjq.github.io/2016/08/19/Basic-Operator/","excerpt":"如果赋值运算的右边是一个包含多个值的元组，则它的元素会被一次分成多个常量或变量：let (x, y) = (1, 2)// x则等于1，y则等于2","text":"如果赋值运算的右边是一个包含多个值的元组，则它的元素会被一次分成多个常量或变量：let (x, y) = (1, 2)// x则等于1，y则等于2 不同于C及Objective-C中的赋值运算符，在Swift中的赋值运算符并不会返回值，因此以下表达式是错误的：if x = y &#123; // 这是错误的，因为x = y并不会返回一个值&#125; 浮点数求余运算：不同于C及Objective-C中的求余运算，Swift的求余运算还可以运算浮点数：8 % 2.5 // 等于0.5// 在这个例子中8除以2.5等于3，余0.5，因此求余运算符返回0.5的Double型。 元组也可比较运算，元组的比较运算从左至右，每次比较一个值，直到找到两个值不相等。如果所有元素都相等，则表示元组相等，例如：(1, \"zebra\") &lt; (2, \"apple\") // true，因为1小于2(3, \"apple\") &lt; (3, \"bird\") // true，因为3等于3，但是\"apple\"小于\"bird\"(4, \"dog\") == (4, \"dog\") // true，因为4等于4，且\"dog\"等于\"dog\" 注意：swift标准库中的元组比较运算只支持少于7个元素的元组比较，若是要比较7个或更多元素的元组则需要你自己重载比较运算符。 空合并运算符(Nil Coalescing Operator)空合并运算符(a ?? b)会对可选值a解包如果它有值的话，如果a是nil的话，则会返回一个默认的值b，表达式中的a一般为可选类型，而b必须与a的存储类型相匹配。 空合并运算符可速记为如下代码：a != nil ? a! : b 上述代码利用三目运算符，当a不为nil时将a强制解包(a!)读取a中的值，否则则返回默认值b。空合并运算符提供了一种更为优雅的方式来处理条件判断及解包操作，更加简洁，更具阅读性。注意：如果a的值非空，则b的值不会被估值，这就是所谓的短路求值。 下面的例子利用空合并运算符，在默认的颜色名以及可选的用户定义颜色名之间选择： let defaultColorName = \"red\"var userDefinedColorName: String? // userDefinedColorName默认为nilvar colorNameToUse = userDefinedColorName ?? defaultColorName// 因为userDefinedColorName为nil，因此colorNameToUse将会赋值为\"red\"","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"swift","slug":"Technology/Programming/swift","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/swift/"}],"tags":[{"name":"Basic Operators","slug":"Basic-Operators","permalink":"https://coder-zjq.github.io/tags/Basic-Operators/"}]},{"title":"LLDB — 让调试更有趣","slug":"LLDB","date":"2016-08-18T23:41:06.000Z","updated":"2016-08-19T00:30:23.000Z","comments":true,"path":"2016/08/19/LLDB/","link":"","permalink":"https://coder-zjq.github.io/2016/08/19/LLDB/","excerpt":"什么是 LLDB？ LLDB 是一个有着 REPL（交互式）的特性和 C++ ，Python 插件的开源调试器； LLDB 是 Xcode 中默认的调试器，支持在桌面、iOS 设备以及 iOS 模拟器上调试以 C 语言、Objective-C 或者 C ++ 编写的程序； LLDB 允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。","text":"什么是 LLDB？ LLDB 是一个有着 REPL（交互式）的特性和 C++ ，Python 插件的开源调试器； LLDB 是 Xcode 中默认的调试器，支持在桌面、iOS 设备以及 iOS 模拟器上调试以 C 语言、Objective-C 或者 C ++ 编写的程序； LLDB 允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。 LLDB 简单使用在此之前你可能已经使用过 LLDB ，也许只是在 Xcode 的界面上加一些断点，查看一些变量的值。但是通过一些小的技巧，你就可以做一些非常酷的事情。 help — 指令帮助help 是最简单的指令，输入 help便会为你列举所有的命令。同时，如果你忘记一条指令的作用或者想要知道更多，你便可以输入 help &lt;command&gt; 其中 &lt;command&gt; 为你想要了解的指令，例如： help print。 p &amp; po — 打印变量或者对象因为 LLDB 支持前缀匹配，因此你可以将 print 简写为 p 或者 pri ，而 print 则代表 expression -- ；po 则代表 expression -O -- ，意为 print object ，打印对象。输入 p 指令可打印其对象类型、内存地址以及该对象的值等具体信息，而 po 指令则是打印其调用 description 方法得到的值。 (注：打印集合类型对象时，p指令会省略具体的值，只提示集合的数量等信息，因此若需查看集合中的值应使用 po指令，如下图所示：) 打印 NSString : 打印 NSDictionary : 打印 Person :#import &lt;Foundation/Foundation.h&gt;#pragma mark - 自定义Person类@interface Person : NSObject/** 名字 */@property (nonatomic, copy) NSString *name;/** 年龄 */@property (nonatomic, assign) NSInteger age;@end@implementation Person/** 重写description方法 */- (NSString *)description&#123; return [NSString stringWithFormat:@\"name:%@,age:%ld\", self.name, self.age];&#125;@end#pragma mark - main函数int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; Person *p = [[Person alloc] init]; p.name = @\"Joker\"; p.age = 23; &#125; return 0;&#125; 指定格式打印： 以二进制打印 (lldb) p/t 23(int) $0 = 0b00000000000000000000000000010111 以八进制打印 (lldb) p/o 23(int) $1 = 027 以十六进制打印 (lldb) p/x 23(int) $2 = 0x00000017 以二进制打印，且只打印一个字节即八位(char类型只占据一个字节的内存) (lldb) p/t (char)23(char) $3 = 0b00010111 expression — 改变值如果你想在调试的时候改变一个已有的值，那么你可以使用expression指令，也可以简写为e 在打印前添加断点： 利用LLDB查看并修改已经定义的值： 继续运行查看打印结果 可以看到之前定义的值通过LLDB已经成功被修改了。 LLDB更新UI既然LLDB可以修改已定义的值，那么LLDB能否在调试时修改UI中各类控件属性，以实现在不重新运行程序的情况下，更新UI查看效果？接下来进行验证： 新建一个iOS项目，运行并断点，查看当前界面效果 LLDB中改变控制器view背景 界面已经更新，变为绿色","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Debug","slug":"Technology/Debug","permalink":"https://coder-zjq.github.io/categories/Technology/Debug/"},{"name":"LLDB","slug":"Technology/Debug/LLDB","permalink":"https://coder-zjq.github.io/categories/Technology/Debug/LLDB/"}],"tags":[{"name":"LLDB","slug":"LLDB","permalink":"https://coder-zjq.github.io/tags/LLDB/"}]},{"title":"Objective-C 中 self 与 super 的区别","slug":"difference-between-self-and-super-in-Objective-C","date":"2016-08-16T12:42:26.000Z","updated":"2016-11-22T14:51:10.000Z","comments":true,"path":"2016/08/16/difference-between-self-and-super-in-Objective-C/","link":"","permalink":"https://coder-zjq.github.io/2016/08/16/difference-between-self-and-super-in-Objective-C/","excerpt":"以下代码的打印结果是什么？为什么？@interface JQApple : JQFruit@end@implementation JQApple- (instancetype)init&#123; self = [super init]; if (self) &#123; NSLog(@\"%@\", NSStringFromClass([self class])); NSLog(@\"%@\", NSStringFromClass([super class])); &#125; return self;&#125;@end","text":"以下代码的打印结果是什么？为什么？@interface JQApple : JQFruit@end@implementation JQApple- (instancetype)init&#123; self = [super init]; if (self) &#123; NSLog(@\"%@\", NSStringFromClass([self class])); NSLog(@\"%@\", NSStringFromClass([super class])); &#125; return self;&#125;@end 按照面向对象的思想应该是分别打印JQApple和JQFruit然而运行结果却出乎我们的意料，最终均都打印“JQApple”。这是为什么？ 因为self是类的隐藏参数，指向当前调用方法的对象。而super并不是如我们所想是指向当前对象父类的指针。其实super是一个编译器标识符，在运行时中与self相同，指向同一个消息接受者，只是self会优先在当前类的methodLists中查找方法，而super则是优先从父类中查找。验证如下：在终端运行：$ clang -rewrite-objc main.m 可以看到运行时代码如下：NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_ld_03322m393b5cyvhz2zhv2c100000gn_T_main_97554f_mi_0, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(\"class\"))));NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_ld_03322m393b5cyvhz2zhv2c100000gn_T_main_97554f_mi_1, NSStringFromClass(((Class (*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(\"JQApple\"))&#125;, sel_registerName(\"class\")))); 删除相关无关类型及方法后代码如下：objc_msgSend((id)self, sel_registerName(\"class\"));objc_msgSendSuper((__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(\"JQApple\"))&#125;, sel_registerName(\"class\")); 查看函数定义：/** * Sends a message with a simple return value to an instance of a class. * * @param self A pointer to the instance of the class that is to receive the message. * @param op The selector of the method that handles the message. * @param ... * A variable argument list containing the arguments to the method. * * @return The return value of the method. * * @note When it encounters a method call, the compiler generates a call to one of the * functions \\c objc_msgSend, \\c objc_msgSend_stret, \\c objc_msgSendSuper, or \\c objc_msgSendSuper_stret. * Messages sent to an object’s superclass (using the \\c super keyword) are sent using \\c objc_msgSendSuper; * other messages are sent using \\c objc_msgSend. Methods that have data structures as return values * are sent using \\c objc_msgSendSuper_stret and \\c objc_msgSend_stret. */OBJC_EXPORT id objc_msgSend(id self, SEL op, ...) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);/** * Sends a message with a simple return value to the superclass of an instance of a class. * * @param super A pointer to an \\c objc_super data structure. Pass values identifying the * context the message was sent to, including the instance of the class that is to receive the * message and the superclass at which to start searching for the method implementation. * @param op A pointer of type SEL. Pass the selector of the method that will handle the message. * @param ... * A variable argument list containing the arguments to the method. * * @return The return value of the method identified by \\e op. * * @see objc_msgSend */OBJC_EXPORT id objc_msgSendSuper(struct objc_super *super, SEL op, ...) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0); 可知objc_msgSend函数中的self参数是指指向接收消息的类的实例的指针，即消息接受者，而op参数则是指处理该消息的selector；objc_msgSendSuper函数中的参数super则是一个objc_super结构体，objc_super结构体定义如下：/// Specifies the superclass of an instance. struct objc_super &#123; /// Specifies an instance of a class. __unsafe_unretained id receiver; /// Specifies the particular superclass of the instance to message. __unsafe_unretained Class super_class; /* super_class is the first class to search */&#125;; 其中receiver是指类的实例，super_class则是指该实例的父类。可以看到在编译后的C++代码中有个__rw_objc_super结构体：struct __rw_objc_super &#123; struct objc_object *object; struct objc_object *superClass; __rw_objc_super(struct objc_object *o, struct objc_object *s) : object(o), superClass(s) &#123;&#125; &#125;; 其实即为objc_super结构体。通过(__rw_objc_super){(id)self, (id)class_getSuperclass(objc_getClass(&quot;JQApple&quot;))}该段代码可知：我们把self以及JQApple的父类通过结构体的构造方法构造了一个__rw_objc_super结构体，也就是objc_super。因此objc_super结构体中的receiver既是self。所以[self class]和[super class]指向的是同一个消息接受者，只是self会优先从当前类的实现中寻找方法处理消息，而super则是会优先从objc_super结构体中的super_class也就是父类的实现中查找。JQFruit及JQApple中均未实现- (Class)class;方法，因此会逐级向上查找最终调用基类NSObject的- (Class)class;方法，通过官方开源的NSObject的- (Class)class;方法代码：- (Class)class&#123; return object_getClass(self);&#125; 可知，消息接受者是self，而[self class]和[super class]指向的是同一个消息接受者，因此该段代码均打印JQApple。","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"Objective-C","slug":"Technology/Programming/Objective-C","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/Objective-C/"}],"tags":[{"name":"self","slug":"self","permalink":"https://coder-zjq.github.io/tags/self/"},{"name":"super","slug":"super","permalink":"https://coder-zjq.github.io/tags/super/"}]},{"title":"Git 常用指令记录","slug":"git-code","date":"2016-08-16T11:10:41.000Z","updated":"2016-11-22T14:43:24.000Z","comments":true,"path":"2016/08/16/git-code/","link":"","permalink":"https://coder-zjq.github.io/2016/08/16/git-code/","excerpt":"配置与帮助# 查看 Git 配置信息$ git config -l# 修改 Git 配置文件$ git config -e# 修改提交时的用户信息$ git config user.name \"[name]\"$ git config user.email \"[email]\"# 查看所有指令$ git help# 查看某条指令，例如 config$ git config --help","text":"配置与帮助# 查看 Git 配置信息$ git config -l# 修改 Git 配置文件$ git config -e# 修改提交时的用户信息$ git config user.name \"[name]\"$ git config user.email \"[email]\"# 查看所有指令$ git help# 查看某条指令，例如 config$ git config --help 版本库创建# 在当前文件夹初始化一个空的版本库，若已存在版本库则将其重新初始化$ git init# 新建一个目录并初始化一个空的版本库$ git init [repo-name]# 通过 ssh 从远程仓库克隆$ git clone git@github.com:Coder-ZJQ/Test-Git.git# 通过 https 从远程仓库克隆$ git clone https://github.com/Coder-ZJQ/Test-Git.git 文件操作# 新建一个文件$ touch [file-name]# 新建一个文件夹$ mkdir [dir-name]# 查看一个文件$ cat [file-name]# 编辑一个文件，编辑完成输入 \":wq\" 保存退出$ vi [file-name]# 将工作区中已修改的文件，添加到暂存区（可多个文件）$ git add [file1] [file2] ...# 将文件夹下已修改的文件添加到暂存区（可多个文件夹）$ git add [dir1] [dir2] ...# 将当前目录下的所有已修改文件添加至暂存区$ git add ./# 删除工作区的文件，并将此次操作放入暂存区$ git rm [file1] [file2] ...# 删除文件夹下的所有文件，并将此次操作放入暂存区（并不会删除文件夹）$ git rm -r [dir]# 为文件改名，并将此次操作放入暂存区$ git mv [file-original] [file-renamed] 修改管理# 查看当前状态$ git status# 将暂存区的修改提交至当前分支$ git commit -m \"[message]\"# 将暂存区中的指定文件或文件夹添加到当前分支$ git commit [file] | [dir] ... -m \"[message]\"# 将修改或删除的文件直接提交至当前分支，跳过 add 步骤（新建文件还需先 add ）$ git commit -a -m \"[message]\"# 提交一次新的 commit，重写 message$ git commit --amend -m \"[message]\"# 恢复修改至最近的一次 commit 或者 add，即放弃工作区中的修改$ git checkout [file] | [dir] ...# 若是已经将工作区的修改 add 至暂存区，可以先 reset 然后再 checkout$ git reset HEAD [file] | [dir] ...# 若是已经 add 并且 commit，可以版本回退，撤销修改$ git reset --hard [commit-id]# 保存当前工作区至工作栈$ git stash# 恢复工作栈栈顶的工作区，但并不会删除$ git stash apply# 删除工作栈栈顶的工作区$ git stash drop# 将工作栈栈顶的工作区出栈：恢复工作区并删除$ git stash pop# 查看工作栈中保存的工作区$ git stash list 分支管理# 查看本地分支$ git branch# 查看远程分支$ git branch -r# 查看所有分支$ git branch -a# 创建一个新的分支$ git branch [branch-name]# 在指定 commit 创建一个分支$ git branch [branch-name] [commit-id]# 在指定 tag 创建一个分支$ git branch [branch-name] [tag-name]# 新建一个分支，并追踪一个远程分支$ git branch --track [branch-name] [remote-branch-name]# 在现有分支与指定的远程分支之间建立追踪关系$ git branch --set-upstream [branch-name] [remote-branch-name]$ git branch -f --track test [branch-name] [remote-branch-name]# 切换分支$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 创建一个新的分支，并跳转至该分支$ git checkout -b [branch-name]# 合并某分支至当前分支，默认是 Fast-forward 模式$ git merge [branch-name]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote-branch] 远程仓库操作# 创建 SSH Key$ ssh-keygen -t rsa -C \"youremail@example.com\"# 本地关联远程版本库，并设置简称$ git remote add [remote-name] [remote-SSG | remote-URL]# 将远程版本库代码更新至本地，但并不会执行合并操作$ git fetch [remote-name]# 从远程版本库获取代码，并与本地分支合并$ git pull [remote-name] [branch-name]# 上传本地指定分支到远程仓库$ git push [remote-name] [branch-name]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote-name] --force# 推送所有分支到远程仓库$ git push [remote-name] --all# 显示所有远程版本库$ git remote -v# 显示某个远程版本库信息$ git remote show [remote-name] 标签管理# 列出所有 tag $ git tag# 查看 tag 信息$ git show [tag-name]# 在当前 commit 新建一个 tag$ git tag [tag-name]# 在指定 commit 上新建一个 tag$ git tag [tag-name] [commit-id]# 创建一个 tag 并指定标签信息$ git tag -a [tag-name] -m \"[message]\" [commit-id]# 删除标签$ git tag -d [tag-name]# 推送本地标签至远程版本库$ git push [remote-name] [tag-name]# 推送所有尚未推送的本地标签至远程版本库$ git push [remote-name] --tags# 删除远程版本库中的标签，先删除本地，再推送删除远程$ git tag -d [tag-name]$ git push [remote-name] :refs/tags/[tag-name] 信息查看# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat \"@&#123;0 day ago&#125;\"# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 其他# 生成一个可供发布的压缩包$ git archive 参考资料：廖雪峰的官方网站 - Git 教程阮一峰 - 常用 Git 清单git-scm","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tools","slug":"Technology/Tools","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/"},{"name":"Git","slug":"Technology/Tools/Git","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://coder-zjq.github.io/tags/Git/"}]},{"title":"＠property 、 ＠synthesize 与 ＠dynamic 的作用","slug":"@property_@synthesize_@dynamic","date":"2016-08-09T00:32:13.000Z","updated":"2016-11-22T14:50:05.000Z","comments":true,"path":"2016/08/09/@property_@synthesize_@dynamic/","link":"","permalink":"https://coder-zjq.github.io/2016/08/09/@property_@synthesize_@dynamic/","excerpt":"@property: 用于声明成员变量的 getter/setter 方法 @synthesize: 与 @property 配套使用，@synthesize 会自动生成一个_开头的成员变量（若是不指定的话），并实现 @property 声明的 getter/setter 方法。 @dynamic: 不会自动生成成员变量，程序员需自己添加成员变量并实现 getter/setter 方法。","text":"@property: 用于声明成员变量的 getter/setter 方法 @synthesize: 与 @property 配套使用，@synthesize 会自动生成一个_开头的成员变量（若是不指定的话），并实现 @property 声明的 getter/setter 方法。 @dynamic: 不会自动生成成员变量，程序员需自己添加成员变量并实现 getter/setter 方法。 具体细节详见以下代码： #import &lt;Foundation/Foundation.h&gt;@interface JQPerson : NSObject&#123; // 3.1 由于 @dynamic 并不会自动生成成员变量，因此需自主添加成员变量用于 getter/setter 方法，否则会报 “Use undeclared identifier” 错误。 NSInteger _weight;&#125;// 1. @property 的简单使用@property (nonatomic, copy) NSString *name;@property (nonatomic, assign) NSInteger age;@property (nonatomic, assign) NSInteger height;@property (nonatomic, assign) NSInteger weight;@end@implementation JQPerson// 2. @synthesize 的使用// 2.1 默认生成\"_\"开头的成员变量， 即：@synthesize name = _name;// 2.2 生成与 @property 相同的不带下划线的成员变量：@synthesize age;// 2.3 指定生成的成员变量名：@synthesize height = H;// 3. @dynamic 的使用@dynamic weight;// 3.2 实现 getter/setter 方法（这里只是简单的实现）：- (void)setWeight:(NSInteger)weight &#123; _weight = weight;&#125;- (NSInteger)weight &#123; return _weight;&#125;@end （Tips：在都没有使用 @synthesize 以及 @dynamic 时，默认为 @synthesize propertyName = _propertyName;。但若是同时实现了 getter&amp;setter 方法，则隐含表示为 @dynamic propertyName; 因此编译器并不会自动生成成员变量，此时若是使用成员变量则会出现 “Use undeclared identifier” 错误。解决方法可以在类的声明中自主添加私有的成员变量，或者使用 @synthesize，告知编译器自动生成成员变量。）","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"Objective-C","slug":"Technology/Programming/Objective-C","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/Objective-C/"}],"tags":[{"name":"＠property","slug":"＠property","permalink":"https://coder-zjq.github.io/tags/＠property/"},{"name":"＠synthesize","slug":"＠synthesize","permalink":"https://coder-zjq.github.io/tags/＠synthesize/"},{"name":"＠dynamic","slug":"＠dynamic","permalink":"https://coder-zjq.github.io/tags/＠dynamic/"}]},{"title":"Alcatraz 的安装与使用","slug":"Alcatraz","date":"2016-04-22T14:25:48.000Z","updated":"2016-11-22T14:50:22.000Z","comments":true,"path":"2016/04/22/Alcatraz/","link":"","permalink":"https://coder-zjq.github.io/2016/04/22/Alcatraz/","excerpt":"什么是 Alcatraz ？ Alcatraz is an open-source package manager for Xcode 7+. It lets you discover and install plugins, templates and color schemes without the need for manually cloning or copying files. It installs itself as a part of Xcode and it feels like home.Alcatraz 是一款在 Xcode 7+ 以上用于管理开源包的工具。它可以帮你查找或安装 Xcode 插件、模板、颜色主题，不需要认为的克隆或拷贝文件，它就像是 Xcode 的一部分。","text":"什么是 Alcatraz ？ Alcatraz is an open-source package manager for Xcode 7+. It lets you discover and install plugins, templates and color schemes without the need for manually cloning or copying files. It installs itself as a part of Xcode and it feels like home.Alcatraz 是一款在 Xcode 7+ 以上用于管理开源包的工具。它可以帮你查找或安装 Xcode 插件、模板、颜色主题，不需要认为的克隆或拷贝文件，它就像是 Xcode 的一部分。 （注：Alcatraz 要求 Xcode 版本号为 7 以上） Alcatraz 的安装 打开终端，在终端中输入： $ curl -fsSL https://raw.github.com/alcatraz/Alcatraz/master/Scripts/install.sh | sh 安装成功后显示如下，并重启 Xcode 重启Xcode会提示你是否加载 Bundle，选择 Load Bundle 按 shift + command + 9 或者 Windows --&gt; Package Manager ，便可打开 Alcatraz 的图形界面 Alcatraz 的卸载 打开终端，在终端中输入：$ rm -rf ~/Library/Application\\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin Alcatraz 的使用 输入想要使用的插件，以 KSImagedNamed 为例，点击 INSTALL 便可安装 在项目中输入 [UIImage imageNamed:] 验证： Alcatraz 安装的插件都会下载到 ~/Library/Application Support/Alcatraz/Plug-ins 文件夹下 因此若要删除不使用的插件，可直接在该文件夹下删除，或者在图形界面点击 REMOVE ，删除所有插件：$ rm -rf ~/Library/Application\\ Support/Alcatraz/","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tools","slug":"Technology/Tools","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/"},{"name":"Alcatraz","slug":"Technology/Tools/Alcatraz","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/Alcatraz/"}],"tags":[{"name":"Alcatraz","slug":"Alcatraz","permalink":"https://coder-zjq.github.io/tags/Alcatraz/"}]},{"title":"CocoaPods 的安装与使用","slug":"cocoapods","date":"2016-04-22T13:00:07.000Z","updated":"2016-11-22T14:50:57.000Z","comments":true,"path":"2016/04/22/cocoapods/","link":"","permalink":"https://coder-zjq.github.io/2016/04/22/cocoapods/","excerpt":"什么是 CocoaPods？ CocoaPods 可以为你管理 Xcode 项目中使用的依赖库，且只需要编辑一个简单的文本文件—— Podfile 。CocoaPods 会解析这些库之间的依赖，获取源代码，并将它们放入一个 Xcode 工作空间，以可以被用来构造你的项目。","text":"什么是 CocoaPods？ CocoaPods 可以为你管理 Xcode 项目中使用的依赖库，且只需要编辑一个简单的文本文件—— Podfile 。CocoaPods 会解析这些库之间的依赖，获取源代码，并将它们放入一个 Xcode 工作空间，以可以被用来构造你的项目。 CocoaPods 的安装 CocoaPods 是以 Ruby 构建的，幸运的是 Mac OS X 自带默认的 Ruby 环境，因此安装很简单，不过需先更换下 Ruby 的默认源（被墙）。 移除 Ruby 默认源： $ gem sources --remove https://rubygems.org/ 添加国内淘宝提供的 Ruby 源（注：已经换成 https 协议的）： $ gem sources -a https://ruby.taobao.org/ 查看是否替换成功，并且确定只有 https://ruby.taobao.org/ 这一个源： $ gem sources -l: 若显示如下则表示替换成功： *** CURRENT SOURCES *** https://ruby.taobao.org/ 安装 CocoaPods 至: $ sudo gem install cocoapods(OS X 10.11之前)$ sudo gem install -n /usr/local/bin cocoapods (OS X 10.11之后) 输入密码，安装成功后接着执行，设置 CocoaPods 的环境 $ pod setup 之后便会在 /usr/local/bin 或 /usr/bin 文件夹下看到这些可执行文件： 可以查看下 CocoaPods 版本验证是否安装成功$ pod --version 终端使用CocoaPods 新建一个 Xcode 项目 cd 到项目根目录下： $ cd /Users/Joker/Desktop/TestPods/ 创建 Podfile $ touch Podfile 使用 vim 编辑 Podfile $ vim Podfile 输入如下内容，并 :wq 保存退出 # 表示使用平台是iOSplatform:ios# 导入AFNetworking，没有标明版本的话，默认是导入最新版pod 'AFNetworking' 开始安装需导入的依赖库 $ pod install 导入成功的话会提示你以后使用 XXXX.xcworkspace 文件打开项目 [!] Please close any current Xcode sessions and use TestPods.xcworkspace for this project from now on. 且项目根目录下会自动生成一些文件 打开项目，此时项目下有两个工作空间，新增的则为 CocoaPods 用以管理依赖库的工作空间，可在该工作空间的 Pods 文件夹下看到导入的依赖库 利用 CocoaPods 插件除了利用终端使用 CocoaPods 之外，还可以为 Xcode 安装 CocoaPods 插件，使 pod 更加简单。 下载 kattrali/cocoapods-xcode-plugin 打开 CocoaPods.xcworkspace 运行，便可在 ~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/ 文件夹下看到 CocoaPods 插件 从 Xcode 5 开始，苹果要求加入 UUID 证书从而保证插件的稳定性。因此Xcode版本更新之后需要在 cocoapods-xcode-plugin 的 Info.plist 文件中添加 Xcode 的 UUID 。终端下输入： $ defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID 在 ~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/ 文件夹下找到 CocoaPods 插件，显示包内容，并在 info.plist 中的 DVTPlugInCompatibilityUUIDs 项新增刚才获取的 UUID ： 添加成功后重启Xcode便会提示，选择 Load Bundle 此时打开Xcode项目便可在 Product 下看到： 记得修改 GEM_PATH 为 CocoaPods 的安装目录，如：/usr/local/bin 之后使用 CocoaPods pod依赖库便是可视化的Create/Edit Podfile:创建或编辑PodfileInstall Pods:安装Update Pods:更新 附： pod 常用命令： pod install: 安装依赖库，并将版本信息写入 Podfile.lock 文件；pod plugins:查看可用的 CocoaPods 插件；pod list:查看远程 pods 库中所有的依赖库；pod search:查找需导入的依赖库是否在 pods 库中；pod setup:设置 CocoaPods 的环境；pod update:更新过期的依赖库，并且创建新的 Podfile.lock 文件；pod --version: 查看工具版本号；pod --help:显示帮助信息。 pod 控制依赖库版本： //不显式指定依赖库版本，表示每次都获取最新版本pod ‘AFNetworking’//只使用2.0版本pod ‘AFNetworking’, ‘2.0’//使用高于2.0的版本pod ‘AFNetworking’, ‘&gt;2.0′//使用大于或等于2.0的版本pod ‘AFNetworking’, ‘&gt;=2.0′//使用小于2.0的版本pod ‘AFNetworking’, ‘&lt;2.0′//使用小于或等于2.0的版本pod ‘AFNetworking’, ‘&lt;=2.0′//使用大于等于0.1.2但小于0.2的版本，相当于&gt;=0.1.2并且&lt;0.2.0pod ‘AFNetworking’, ‘~&gt;0.1.2′//使用大于等于0.1但小于1.0的版本pod ‘AFNetworking’, ‘~&gt;0.1′ //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本 pod ‘AFNetworking’, ‘~&gt;0′","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tools","slug":"Technology/Tools","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/"},{"name":"CocoaPods","slug":"Technology/Tools/CocoaPods","permalink":"https://coder-zjq.github.io/categories/Technology/Tools/CocoaPods/"}],"tags":[{"name":"CocoaPods","slug":"CocoaPods","permalink":"https://coder-zjq.github.io/tags/CocoaPods/"}]},{"title":"如何抽取其它应用素材 - iOS","slug":"extract-images","date":"2016-04-17T14:01:04.000Z","updated":"2016-11-22T15:05:10.000Z","comments":true,"path":"2016/04/17/extract-images/","link":"","permalink":"https://coder-zjq.github.io/2016/04/17/extract-images/","excerpt":"准备工作下载 ipa ： iTunes –&gt; App Store –&gt; 下载所需素材的应用。下载完成后，可在我的 iPhone 应用 –&gt; 在 Finder 中显示，看到下载的 ipa 文件。","text":"准备工作下载 ipa ： iTunes –&gt; App Store –&gt; 下载所需素材的应用。下载完成后，可在我的 iPhone 应用 –&gt; 在 Finder 中显示，看到下载的 ipa 文件。 生成 cartool 可执行文件 在 github 上下载 cartool ，用 Xcode 打开并执行，便可在项目的 Products 文件夹下找到生成 cartool 可执行文件。 （TIPS：若是需将 cartoon 移动至其他文件夹，不要直接在工程目录下直接拖动，这样只是生成个替身。正确的方式应 show in finder 在 finder 中操作。） 具体步骤右击下载的 ipa 文件 –&gt; 打开方式 –&gt; 选择归档实用工具； 可解档出一文件夹 –&gt; Payload –&gt; 显示包内容； 在该包内便有部分所需的素材； 但还有部分素材保存在 Assets.car 文件中，此时就可以用到刚才生成的 cartool ，抽取其中的素材； 打开终端 cd 到 cartool 所在的文件夹下，执行命令 ./cartool [Assets.car所在文件夹] [存放素材的文件夹] ，便可获得 Assets.car 中的素材。 获取的素材一般会带有 “~iphone” 或者 “~ipad” ，使用时需替换掉，因此需批量更改素材名，可用 Xcode 编写代码#import &lt;Foundation/Foundation.h&gt;int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; // 素材文件夹路径（输入自己的） NSString *filePath = @\"/Users/Joker/....../Images\"; // 获取文件管理者 NSFileManager *manager = [NSFileManager defaultManager]; // 获取该文件夹下所有文件名 NSArray *fileNames = [manager contentsOfDirectoryAtPath:filePath error:nil]; // 遍历文件名 for (NSString *fileName in fileNames) &#123; // 为修改前的文件路径 NSString *fromPath = [filePath stringByAppendingPathComponent:fileName]; // 将“~iphone”替换为“”，最好用正则表达式，此处仅简单替换 NSString *changeToName = [fileName stringByReplacingOccurrencesOfString:@\"~iphone\" withString:@\"\"]; // 拼接该玩的文件名至路径 NSString *toPath = [filePath stringByAppendingPathComponent:changeToName]; // 将素材移动至修改完的路径 [manager moveItemAtPath:fromPath toPath:toPath error:nil]; &#125; &#125; return 0;&#125; 利用插件有个大神写了个插件 iOS Images Extractor ，就是下面这个： 不过好像删除了，如果有需要的话下面是分享的下载地址。使用的话直接将 ipa 文件拖进去就可以。 项目地址插件地址 （注意，抽取的素材仅供学习，不要用于其他商业用途）","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Tips","slug":"Technology/Tips","permalink":"https://coder-zjq.github.io/categories/Technology/Tips/"},{"name":"Other","slug":"Technology/Tips/Other","permalink":"https://coder-zjq.github.io/categories/Technology/Tips/Other/"}],"tags":[{"name":"Extract Images","slug":"Extract-Images","permalink":"https://coder-zjq.github.io/tags/Extract-Images/"}]},{"title":"JS 输出","slug":"JS-输出","date":"2015-10-29T07:40:53.000Z","updated":"2016-11-22T14:58:17.000Z","comments":true,"path":"2015/10/29/JS-输出/","link":"","permalink":"https://coder-zjq.github.io/2015/10/29/JS-输出/","excerpt":"","text":"通过指定的 id 来访问 HTML 元素，并改变其内容：&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;My First Web Page&lt;/h1&gt;&lt;p id=\"demo\"&gt;My First Paragraph&lt;/p&gt;&lt;script&gt;document.getElementById(\"demo\").innerHTML=\"My First JavaScript\";&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Technology","slug":"Technology","permalink":"https://coder-zjq.github.io/categories/Technology/"},{"name":"Programming","slug":"Technology/Programming","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/"},{"name":"JavaScript","slug":"Technology/Programming/JavaScript","permalink":"https://coder-zjq.github.io/categories/Technology/Programming/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://coder-zjq.github.io/tags/JavaScript/"}]}]}