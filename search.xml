<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[difference between self and super in Objective-C]]></title>
      <url>https://coder-zjq.github.io/2016/08/16/difference-between-self-and-super-in-Objective-C/</url>
      <content type="html"><![CDATA[<h3 id="以下代码的打印结果是什么？为什么？"><a href="#以下代码的打印结果是什么？为什么？" class="headerlink" title="以下代码的打印结果是什么？为什么？"></a>以下代码的打印结果是什么？为什么？</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQApple</span> : <span class="title">JQFruit</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">JQApple</span></span></div><div class="line">- (<span class="keyword">instancetype</span>)init&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]));</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">super</span> <span class="keyword">class</span>]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>按照面向对象的思想应该是分别打印<code>JQApple</code>和<code>JQFruit</code><br>然而运行结果却出乎我们的意料，最终均都打印“JQApple”。这是为什么？</p>
<p>因为<code>self</code>是类的隐藏参数，指向当前调用方法的对象。而<code>super</code>并不是如我们所想是指向当前对象父类的指针。其实<code>super</code>是一个编译器标识符，在运行时中与<code>self</code>相同，指向同一个消息接受者，只是<code>self</code>会优先在当前类的<code>methodLists</code>中查找方法，而<code>super</code>则是优先从父类中查找。验证如下：<br>在终端运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ clang -rewrite-objc main.m</div></pre></td></tr></table></figure></p>
<p>可以看到运行时代码如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>((<span class="built_in">NSString</span> *)&amp;__NSConstantStringImpl__var_folders_ld_03322m393b5cyvhz2zhv2c100000gn_T_main_97554f_mi_0, <span class="built_in">NSStringFromClass</span>(((Class (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *)objc_msgSend)((<span class="keyword">id</span>)<span class="keyword">self</span>, sel_registerName(<span class="string">"class"</span>))));</div><div class="line"><span class="built_in">NSLog</span>((<span class="built_in">NSString</span> *)&amp;__NSConstantStringImpl__var_folders_ld_03322m393b5cyvhz2zhv2c100000gn_T_main_97554f_mi_1, <span class="built_in">NSStringFromClass</span>(((Class (*)(__rw_objc_super *, SEL))(<span class="keyword">void</span> *)objc_msgSendSuper)((__rw_objc_super)&#123;(<span class="keyword">id</span>)<span class="keyword">self</span>, (<span class="keyword">id</span>)class_getSuperclass(objc_getClass(<span class="string">"JQApple"</span>))&#125;, sel_registerName(<span class="string">"class"</span>))));</div></pre></td></tr></table></figure></p>
<p>删除相关无关类型及方法后代码如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">objc_msgSend((<span class="keyword">id</span>)<span class="keyword">self</span>, sel_registerName(<span class="string">"class"</span>));</div><div class="line">objc_msgSendSuper((__rw_objc_super)&#123;(<span class="keyword">id</span>)<span class="keyword">self</span>, (<span class="keyword">id</span>)class_getSuperclass(objc_getClass(<span class="string">"JQApple"</span>))&#125;, sel_registerName(<span class="string">"class"</span>));</div></pre></td></tr></table></figure></p>
<p>查看函数定义：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * Sends a message with a simple return value to an instance of a class.</div><div class="line"> * </div><div class="line"> * @param self A pointer to the instance of the class that is to receive the message.</div><div class="line"> * @param op The selector of the method that handles the message.</div><div class="line"> * @param ... </div><div class="line"> *   A variable argument list containing the arguments to the method.</div><div class="line"> * </div><div class="line"> * @return The return value of the method.</div><div class="line"> * </div><div class="line"> * @note When it encounters a method call, the compiler generates a call to one of the</div><div class="line"> *  functions \c objc_msgSend, \c objc_msgSend_stret, \c objc_msgSendSuper, or \c objc_msgSendSuper_stret.</div><div class="line"> *  Messages sent to an object’s superclass (using the \c super keyword) are sent using \c objc_msgSendSuper; </div><div class="line"> *  other messages are sent using \c objc_msgSend. Methods that have data structures as return values</div><div class="line"> *  are sent using \c objc_msgSendSuper_stret and \c objc_msgSend_stret.</div><div class="line"> */</div><div class="line">OBJC_EXPORT <span class="keyword">id</span> objc_msgSend(<span class="keyword">id</span> <span class="keyword">self</span>, SEL op, ...)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);</div><div class="line"><span class="comment">/** </span></div><div class="line"> * Sends a message with a simple return value to the superclass of an instance of a class.</div><div class="line"> * </div><div class="line"> * @param super A pointer to an \c objc_super data structure. Pass values identifying the</div><div class="line"> *  context the message was sent to, including the instance of the class that is to receive the</div><div class="line"> *  message and the superclass at which to start searching for the method implementation.</div><div class="line"> * @param op A pointer of type SEL. Pass the selector of the method that will handle the message.</div><div class="line"> * @param ...</div><div class="line"> *   A variable argument list containing the arguments to the method.</div><div class="line"> * </div><div class="line"> * @return The return value of the method identified by \e op.</div><div class="line"> * </div><div class="line"> * @see objc_msgSend</div><div class="line"> */</div><div class="line">OBJC_EXPORT <span class="keyword">id</span> objc_msgSendSuper(<span class="keyword">struct</span> objc_super *<span class="keyword">super</span>, SEL op, ...)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);</div></pre></td></tr></table></figure></p>
<p>可知<code>objc_msgSend</code>函数中的<code>self</code>参数是指指向接收消息的类的实例的指针，即消息接受者，而<code>op</code>参数则是指处理该消息的<code>selector</code>；<code>objc_msgSendSuper</code>函数中的参数<code>super</code>则是一个<code>objc_super</code>结构体，<code>objc_super</code>结构体定义如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/// Specifies the superclass of an instance. </span></div><div class="line"><span class="keyword">struct</span> objc_super &#123;</div><div class="line">    <span class="comment">/// Specifies an instance of a class.</span></div><div class="line">    __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> receiver;</div><div class="line"></div><div class="line">    <span class="comment">/// Specifies the particular superclass of the instance to message. </span></div><div class="line">    __<span class="keyword">unsafe_unretained</span> Class super_class;</div><div class="line"></div><div class="line">    <span class="comment">/* super_class is the first class to search */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中<code>receiver</code>是指类的实例，<code>super_class</code>则是指该实例的父类。可以看到在编译后的<code>C++</code>代码中有个<code>__rw_objc_super</code>结构体：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> __rw_objc_super &#123; </div><div class="line">    <span class="keyword">struct</span> objc_object *object; </div><div class="line">    <span class="keyword">struct</span> objc_object *superClass; </div><div class="line">    __rw_objc_super(<span class="keyword">struct</span> objc_object *o, <span class="keyword">struct</span> objc_object *s) : object(o), superClass(s) &#123;&#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其实即为<code>objc_super</code>结构体。通过<code>(__rw_objc_super){(id)self, (id)class_getSuperclass(objc_getClass(&quot;JQApple&quot;))}</code>该段代码可知：我们把<code>self</code>以及<code>JQApple</code>的父类通过结构体的构造方法构造了一个<code>__rw_objc_super</code>结构体，也就是<code>objc_super</code>。因此<code>objc_super</code>结构体中的<code>receiver</code>既是<code>self</code>。所以<code>[self class]</code>和<code>[super class]</code>指向的是同一个消息接受者，只是<code>self</code>会优先从当前类的实现中寻找方法处理消息，而<code>super</code>则是会优先从<code>objc_super</code>结构体中的<code>super_class</code>也就是父类的实现中查找。<code>JQFruit</code>及<code>JQApple</code>中均未实现<code>- (Class)class;</code>方法，因此会逐级向上查找最终调用基类<code>NSObject</code>的<code>- (Class)class;</code>方法，通过官方开源的<code>NSObject</code>的<code>- (Class)class;</code>方法代码：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (Class)<span class="keyword">class</span>&#123;</div><div class="line">    <span class="keyword">return</span> object_getClass(<span class="keyword">self</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可知，消息接受者是<code>self</code>，而<code>[self class]</code>和<code>[super class]</code>指向的是同一个消息接受者，因此该段代码均打印<code>JQApple</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用指令记录]]></title>
      <url>https://coder-zjq.github.io/2016/08/16/git-code/</url>
      <content type="html"><![CDATA[<h2 id="配置与帮助"><a href="#配置与帮助" class="headerlink" title="配置与帮助"></a>配置与帮助</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 查看 Git 配置信息</span></div><div class="line">$ git config <span class="_">-l</span></div><div class="line"></div><div class="line"><span class="comment"># 修改 Git 配置文件</span></div><div class="line">$ git config <span class="_">-e</span></div><div class="line"></div><div class="line"><span class="comment"># 修改提交时的用户信息</span></div><div class="line">$ git config user.name <span class="string">"[name]"</span></div><div class="line">$ git config user.email <span class="string">"[email]"</span></div><div class="line"></div><div class="line"><span class="comment"># 查看所有指令</span></div><div class="line">$ git <span class="built_in">help</span></div><div class="line"></div><div class="line"><span class="comment"># 查看某条指令，例如 config</span></div><div class="line">$ git config --help</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="版本库创建"><a href="#版本库创建" class="headerlink" title="版本库创建"></a>版本库创建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 在当前文件夹初始化一个空的版本库，若已存在版本库则将其重新初始化</span></div><div class="line">$ git init</div><div class="line"></div><div class="line"><span class="comment"># 新建一个目录并初始化一个空的版本库</span></div><div class="line">$ git init [repo-name]</div><div class="line"></div><div class="line"><span class="comment"># 通过 ssh 从远程仓库克隆</span></div><div class="line">$ git <span class="built_in">clone</span> git@github.com:Coder-ZJQ/Test-Git.git</div><div class="line"></div><div class="line"><span class="comment"># 通过 https 从远程仓库克隆</span></div><div class="line">$ git <span class="built_in">clone</span> https://github.com/Coder-ZJQ/Test-Git.git</div></pre></td></tr></table></figure>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 新建一个文件</span></div><div class="line">$ touch [file-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个文件夹</span></div><div class="line">$ mkdir [dir-name]</div><div class="line"></div><div class="line"><span class="comment"># 查看一个文件</span></div><div class="line">$ cat [file-name]</div><div class="line"></div><div class="line"><span class="comment"># 编辑一个文件，编辑完成输入 ":wq" 保存退出</span></div><div class="line">$ vi [file-name]</div><div class="line"></div><div class="line"><span class="comment"># 将工作区中已修改的文件，添加到暂存区（可多个文件）</span></div><div class="line">$ git add [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 将文件夹下已修改的文件添加到暂存区（可多个文件夹）</span></div><div class="line">$ git add [dir1] [dir2] ...</div><div class="line"></div><div class="line"><span class="comment"># 将当前目录下的所有已修改文件添加至暂存区</span></div><div class="line">$ git add ./</div><div class="line"></div><div class="line"><span class="comment"># 删除工作区的文件，并将此次操作放入暂存区</span></div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 删除文件夹下的所有文件，并将此次操作放入暂存区（并不会删除文件夹）</span></div><div class="line">$ git rm -r [dir]</div><div class="line"></div><div class="line"><span class="comment"># 为文件改名，并将此次操作放入暂存区</span></div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h2 id="修改管理"><a href="#修改管理" class="headerlink" title="修改管理"></a>修改管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 查看当前状态</span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment"># 将暂存区的修改提交至当前分支</span></div><div class="line">$ git commit -m <span class="string">"[message]"</span></div><div class="line"></div><div class="line"><span class="comment"># 将暂存区中的指定文件或文件夹添加到当前分支</span></div><div class="line">$ git commit [file] | [dir] ... -m <span class="string">"[message]"</span></div><div class="line"></div><div class="line"><span class="comment"># 将修改或删除的文件直接提交至当前分支，跳过 add 步骤（新建文件还需先 add ）</span></div><div class="line">$ git commit <span class="_">-a</span> -m <span class="string">"[message]"</span></div><div class="line"></div><div class="line"><span class="comment"># 提交一次新的 commit，重写 message</span></div><div class="line">$ git commit --amend -m <span class="string">"[message]"</span></div><div class="line"></div><div class="line"><span class="comment"># 恢复修改至最近的一次 commit 或者 add，即放弃工作区中的修改</span></div><div class="line">$ git checkout [file] | [dir] ...</div><div class="line"></div><div class="line"><span class="comment"># 若是已经将工作区的修改 add 至暂存区，可以先 reset 然后再 checkout</span></div><div class="line">$ git reset HEAD [file] | [dir] ...</div><div class="line"></div><div class="line"><span class="comment"># 若是已经 add 并且 commit，可以版本回退，撤销修改</span></div><div class="line">$ git reset --hard [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 保存当前工作区至工作栈</span></div><div class="line">$ git stash</div><div class="line"></div><div class="line"><span class="comment"># 恢复工作栈栈顶的工作区，但并不会删除</span></div><div class="line">$ git stash apply</div><div class="line"></div><div class="line"><span class="comment"># 删除工作栈栈顶的工作区</span></div><div class="line">$ git stash drop</div><div class="line"></div><div class="line"><span class="comment"># 将工作栈栈顶的工作区出栈：恢复工作区并删除</span></div><div class="line">$ git stash pop</div><div class="line"></div><div class="line"><span class="comment"># 查看工作栈中保存的工作区</span></div><div class="line">$ git stash list</div></pre></td></tr></table></figure>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 查看本地分支</span></div><div class="line">$ git branch</div><div class="line"></div><div class="line"><span class="comment"># 查看远程分支</span></div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"><span class="comment"># 查看所有分支</span></div><div class="line">$ git branch <span class="_">-a</span></div><div class="line"></div><div class="line"><span class="comment"># 创建一个新的分支</span></div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 在指定 commit 创建一个分支</span></div><div class="line">$ git branch [branch-name] [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 在指定 tag 创建一个分支</span></div><div class="line">$ git branch [branch-name] [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，并追踪一个远程分支</span></div><div class="line">$ git branch --track [branch-name] [remote-branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 在现有分支与指定的远程分支之间建立追踪关系</span></div><div class="line">$ git branch --set-upstream [branch-name] [remote-branch-name]</div><div class="line">$ git branch <span class="_">-f</span> --track <span class="built_in">test</span> [branch-name] [remote-branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 切换分支</span></div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 切换到上一个分支</span></div><div class="line">$ git checkout -</div><div class="line"></div><div class="line"><span class="comment"># 创建一个新的分支，并跳转至该分支</span></div><div class="line">$ git checkout -b [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 合并某分支至当前分支，默认是 Fast-forward 模式</span></div><div class="line">$ git merge [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></div><div class="line">$ git cherry-pick [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除分支</span></div><div class="line">$ git branch <span class="_">-d</span> [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程分支</span></div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote-branch]</div></pre></td></tr></table></figure>
<h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 创建 SSH Key</span></div><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div><div class="line"></div><div class="line"><span class="comment"># 本地关联远程版本库，并设置简称</span></div><div class="line">$ git remote add [remote-name] [remote-SSG | remote-URL]</div><div class="line"></div><div class="line"><span class="comment"># 将远程版本库代码更新至本地，但并不会执行合并操作</span></div><div class="line">$ git fetch [remote-name]</div><div class="line"></div><div class="line"><span class="comment"># 从远程版本库获取代码，并与本地分支合并</span></div><div class="line">$ git pull [remote-name] [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></div><div class="line">$ git push [remote-name] [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></div><div class="line">$ git push [remote-name] --force</div><div class="line"></div><div class="line"><span class="comment"># 推送所有分支到远程仓库</span></div><div class="line">$ git push [remote-name] --all</div><div class="line"></div><div class="line"><span class="comment"># 显示所有远程版本库</span></div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"><span class="comment"># 显示某个远程版本库信息</span></div><div class="line">$ git remote show [remote-name]</div></pre></td></tr></table></figure>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 列出所有 tag </span></div><div class="line">$ git tag</div><div class="line"></div><div class="line"><span class="comment"># 查看 tag 信息</span></div><div class="line">$ git show [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 在当前 commit 新建一个 tag</span></div><div class="line">$ git tag [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 在指定 commit 上新建一个 tag</span></div><div class="line">$ git tag [tag-name] [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 创建一个 tag 并指定标签信息</span></div><div class="line">$ git tag <span class="_">-a</span> [tag-name] -m <span class="string">"[message]"</span> [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 删除标签</span></div><div class="line">$ git tag <span class="_">-d</span> [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 推送本地标签至远程版本库</span></div><div class="line">$ git push [remote-name] [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 推送所有尚未推送的本地标签至远程版本库</span></div><div class="line">$ git push [remote-name] --tags</div><div class="line"></div><div class="line"><span class="comment"># 删除远程版本库中的标签，先删除本地，再推送删除远程</span></div><div class="line">$ git tag <span class="_">-d</span> [tag-name]</div><div class="line">$ git push [remote-name] :refs/tags/[tag-name]</div></pre></td></tr></table></figure>
<h2 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 显示有变更的文件</span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的版本历史</span></div><div class="line">$ git <span class="built_in">log</span></div><div class="line"></div><div class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></div><div class="line">$ git <span class="built_in">log</span> --stat</div><div class="line"></div><div class="line"><span class="comment"># 搜索提交历史，根据关键词</span></div><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</div><div class="line"></div><div class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></div><div class="line">$ git <span class="built_in">log</span> --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></div><div class="line">$ git <span class="built_in">log</span> -p [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示过去5次提交</span></div><div class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</div><div class="line"></div><div class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></div><div class="line">$ git shortlog -sn</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></div><div class="line">$ git blame [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和工作区的差异</span></div><div class="line">$ git diff</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"><span class="comment"># 显示两次提交之间的差异</span></div><div class="line">$ git diff [first-branch]...[second-branch]</div><div class="line"></div><div class="line"><span class="comment"># 显示今天你写了多少行代码</span></div><div class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交发生变化的文件</span></div><div class="line">$ git show --name-only [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的最近几次提交</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 生成一个可供发布的压缩包</span></div><div class="line">$ git archive</div></pre></td></tr></table></figure>
<hr>
<p> 参考资料：<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的官方网站 - Git 教程</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?utm_source=tool.lu" target="_blank" rel="external">阮一峰 - 常用 Git 清单</a><br><a href="https://git-scm.com/docs" target="_blank" rel="external">git-scm</a></p>
]]></content>
    </entry>
    
  
  
</search>
